{
    "unamed_config_330c0197-ffe9-4b54-a8cd-8bb7cd10f6c7": {
        "summary": {
            "transformations": {
                "total": 331,
                "modules": 29,
                "transformationTypes": 28,
                "byTransformations": {
                    "Variable transform const and let with var": 191,
                    "Array destructuring": 10,
                    "Array.filter.forEach": 4,
                    "Array.filter.join": 5,
                    "Array.filter.length as boolean": 14,
                    "Array.filter.length": 6,
                    "Array.filter.map.join": 4,
                    "Array.filter.map": 5,
                    "Array.map.reduce": 5,
                    "Array.filter.reduce": 3,
                    "Array.map": 8,
                    "Array.join unfold": 6,
                    "Array.join": 6,
                    "Array.map unfold": 11,
                    "Array.map.filter.join": 3,
                    "Array.map.filter": 2,
                    "Array.map.forEach": 4,
                    "Array.map.join unfold": 9,
                    "Array.map.join": 3,
                    "Array.slice.every": 7,
                    "Array.slice.map.join": 7,
                    "Object expression with spread": 1,
                    "Object.entries.filter.map.join": 4,
                    "Object.entries.forEach": 2,
                    "Object.entries.map": 2,
                    "Object.entries.reduce": 2,
                    "Object.values[0]": 2,
                    "String.slice": 5
                }
            },
            "warnings": {
                "total": 30,
                "modules": 8,
                "transformationtypes": 8,
                "byTransformations": {
                    "Array.filter.reduce": 2,
                    "Array.map unfold": 7,
                    "Array.map": 2,
                    "Array.map.filter.join": 3,
                    "Array.map.filter": 3,
                    "Array.map.join unfold": 5,
                    "Array.slice.map.join": 3,
                    "Array.map.reduce": 1
                }
            }
        },
        "transformations": {
            "byTransformation": {
                "total": 331,
                "transformationTypes": 28,
                "transformations": {
                    "Variable transform const and let with var": {
                        "total": 191,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Array destructuring.js": [
                                {
                                    "code": "const array = [1, 2, 3, 4, 5];",
                                    "line": 5,
                                    "collumn": 0
                                },
                                {
                                    "code": "const [] = array;",
                                    "line": 6,
                                    "collumn": 0
                                },
                                {
                                    "code": "const [a1, b1] = array;",
                                    "line": 7,
                                    "collumn": 0
                                },
                                {
                                    "code": "const [a2, , b2] = array;",
                                    "line": 8,
                                    "collumn": 0
                                },
                                {
                                    "code": "let [a3 = aDefault, b3] = array;",
                                    "line": 9,
                                    "collumn": 0
                                },
                                {
                                    "code": "const [a4, b4, ...rest1] = array;",
                                    "line": 10,
                                    "collumn": 0
                                },
                                {
                                    "code": "let [a5, , b5, ...rest2] = array;",
                                    "line": 11,
                                    "collumn": 0
                                },
                                {
                                    "code": "const [a7, b7, ...[c7, d7]] = array;",
                                    "line": 14,
                                    "collumn": 0
                                },
                                {
                                    "code": "const [a, b] = getValue();",
                                    "line": 17,
                                    "collumn": 0
                                },
                                {
                                    "code": "const [a11, b11] = [1, 2, 3];",
                                    "line": 18,
                                    "collumn": 0
                                },
                                {
                                    "code": "const [a22, b22] = arr;",
                                    "line": 19,
                                    "collumn": 0
                                },
                                {
                                    "code": "const [allProps, properties] = schemaProperties('properties'),\n    [allOptProps, optProperties] = schemaProperties('optionalProperties');",
                                    "line": 22,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.filter.fiorEach.js": [
                                {
                                    "code": "const arr = [1, 2, 3];",
                                    "line": 2,
                                    "collumn": 0
                                },
                                {
                                    "code": "const o = {};",
                                    "line": 3,
                                    "collumn": 0
                                },
                                {
                                    "code": "const obj = {\n    i: 1,\n};",
                                    "line": 4,
                                    "collumn": 0
                                },
                                {
                                    "code": "const func = (x) => x > 0;",
                                    "line": 8,
                                    "collumn": 0
                                },
                                {
                                    "code": "const func3 = (x, i) => {\n    return x > 1;\n};",
                                    "line": 9,
                                    "collumn": 0
                                },
                                {
                                    "code": "const y = arr.filter(func).forEach(func3);",
                                    "line": 13,
                                    "collumn": 0
                                },
                                {
                                    "code": "const x1 = arr\n    .filter(function (x) {\n        return x > 1;\n    })\n    .forEach(function (x) {\n        o[i] = x + this.i;\n    }, obj);",
                                    "line": 15,
                                    "collumn": 0
                                },
                                {
                                    "code": "const x2 = arr\n    .filter(function (x) {\n        return x > this.i;\n    }, obj)\n    .forEach(function (x) {\n        o[i] = x + this.i;\n    }, obj);",
                                    "line": 23,
                                    "collumn": 0
                                },
                                {
                                    "code": "const x3 = arr\n    .filter(function (x) {\n        return x > this.i;\n    }, obj)\n    .forEach(function (x) {\n        o[i] = x;\n    });",
                                    "line": 31,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayFilterForEachHelper: _affeh\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterForEachHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayFilterForEachHelperWithForEachThis: _affehwfet\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterForEachHelperWithForEachThis\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayFilterForEachHelperWithFilterAndForEachThis: _affehwmfet\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterForEachHelperWithFilterAndForEachThis\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayFilterForEachHelperWithFilterThis: _affehwmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterForEachHelperWithFilterThis\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.filter.join.js": [
                                {
                                    "code": "const arr = [1, 2, 3];",
                                    "line": 2,
                                    "collumn": 0
                                },
                                {
                                    "code": "const obj = {\n    i: 1,\n};",
                                    "line": 3,
                                    "collumn": 0
                                },
                                {
                                    "code": "const func3 = (x, i) => x > 0;",
                                    "line": 8,
                                    "collumn": 0
                                },
                                {
                                    "code": "const y = arr.filter(func3).join(' ');",
                                    "line": 9,
                                    "collumn": 0
                                },
                                {
                                    "code": "const x = arr.filter(func, obj).join();",
                                    "line": 15,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayFilterJoinHelper: _afjh\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterJoinHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayFilterJoinHelperWithFilterThis: _afjhwft\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterJoinHelperWithFilterThis\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.filter.length as boolean.js": [
                                {
                                    "code": "const obj = { i: 1 };",
                                    "line": 64,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayFilterLengthHelper: _aflh\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterLengthHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.filter.length.js": [
                                {
                                    "code": "const arr = [1, 2, 3, 4, 5];",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayFilterLengthHelper: _aflh\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterLengthHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.filter.map.join.js": [
                                {
                                    "code": "const arr = [1, 2, 3];",
                                    "line": 2,
                                    "collumn": 0
                                },
                                {
                                    "code": "const obj = {\n    i: 1,\n    j: 0.5,\n};",
                                    "line": 8,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayFilterMapJoinHelper: _afmjt\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterMapJoinHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayFilterMapJoinHelperWithFilterThis: _afmjtwft\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterMapJoinHelperWithFilterThis\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayFilterMapJoinHelperWithMapThis: _afmjtwmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterMapJoinHelperWithMapThis\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayFilterMapJoinHelperWithFilterAndMapThis: _afmjtwfmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterMapJoinHelperWithFilterAndMapThis\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.filter.map.js": [
                                {
                                    "code": "const arr = [1, 2, 3];",
                                    "line": 2,
                                    "collumn": 0
                                },
                                {
                                    "code": "const obj = {\n    i: 1,\n    j: 0.5,\n};",
                                    "line": 6,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayFilterMapHelper: _afmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterMapHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayFilterMapHelperWithFilterThis: _afmtwft\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterMapHelperWithFilterThis\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayFilterMapHelperWithMapThis: _afmtwmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterMapHelperWithMapThis\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayFilterMapHelperWithFilterAndMapThis: _afmtwfmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterMapHelperWithFilterAndMapThis\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.filter.reduce.js": [
                                {
                                    "code": "const func2 = require('func2');",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "const arr = [1, 2, 3];",
                                    "line": 3,
                                    "collumn": 0
                                },
                                {
                                    "code": "const func1 = (x, i, a) => x > 1;",
                                    "line": 7,
                                    "collumn": 0
                                },
                                {
                                    "code": "const y = arr.map(func1).reduce((acc, x) => acc + x, 0);",
                                    "line": 8,
                                    "collumn": 0
                                },
                                {
                                    "code": "const arr1 = ['1', '2', '3'];",
                                    "line": 11,
                                    "collumn": 0
                                },
                                {
                                    "code": "const x = arr1.filter((x) => x > 1).reduce((acc, x) => acc + x, 0);",
                                    "line": 12,
                                    "collumn": 0
                                },
                                {
                                    "code": "const z = arr.filter(func2).reduce((acc, x) => acc + x, 0);",
                                    "line": 31,
                                    "collumn": 0
                                },
                                {
                                    "code": "const z1 = arr.filter(func).reduce((acc, x, i, a) => acc + x + i + a[i], 0);",
                                    "line": 34,
                                    "collumn": 0
                                },
                                {
                                    "code": "const obj = {\n    i: 1,\n};",
                                    "line": 37,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayMapReduceHelper: _amrh\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapReduceHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayFilterReduceHelper: _afrh\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterReduceHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayMapHelper: _amh\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayFilterReduceHelperWithFilterThis: _afrhwft\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterReduceHelperWithFilterThis\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.join unfold.js": [
                                {
                                    "code": "const c = [1].join();",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "const a = [1, 2, 3, 4, 5].join();",
                                    "line": 3,
                                    "collumn": 0
                                },
                                {
                                    "code": "const a1 = [\"default-src 'none';\", \"base-uri 'none';\", \"object-src 'none';\"].join(' ');",
                                    "line": 5,
                                    "collumn": 0
                                },
                                {
                                    "code": "const a2 = [s0 ? 5 : 0, 1, 'two', 'three', true, null, undefined, s1, s12].join(a.S);",
                                    "line": 7,
                                    "collumn": 0
                                },
                                {
                                    "code": "const a3 = [s1, s12, s13, s14].join('\\n' + sep);",
                                    "line": 9,
                                    "collumn": 0
                                },
                                {
                                    "code": "const a4 = [\"default-src 'none';\", \"base-uri 'none';\", \"object-src 'none';\"].join(sep);",
                                    "line": 11,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.join.js": [
                                {
                                    "code": "const path = require('path');",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "const arr = [1, 2, 3];",
                                    "line": 3,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayJoinHelper: _ajh\n} = require(\"/babel-preset-perf/dist/helpers/arrayJoinHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.map unfold.js": [
                                {
                                    "code": "const a = [\n    'Int8',\n    'Uint8',\n    'Uint8Clamped',\n    'Int16',\n    'Uint16',\n    'Int32',\n    'Uint32',\n    'Float32',\n    'Float64',\n    'BigInt64',\n    'BigUint64',\n].map((x) => x + 'Array');",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var _mp2 = s => s(root);",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "const schema = (root) => ({\n    metadata: {\n        union: [\n            emptyForm,\n            refForm,\n            typeForm,\n            enumForm,\n            elementsForm,\n            propertiesForm,\n            optionalPropertiesForm,\n            discriminatorForm,\n            valuesForm,\n        ].map((s) => s(root)),\n    },\n});",
                                    "line": 15,
                                    "collumn": 0
                                },
                                {
                                    "code": "const f = (x) => x;",
                                    "line": 35,
                                    "collumn": 0
                                },
                                {
                                    "code": "const f1 = (x, i) => x + i;",
                                    "line": 39,
                                    "collumn": 0
                                },
                                {
                                    "code": "const f11 = (x, i, a) => x + i + a[i];",
                                    "line": 43,
                                    "collumn": 0
                                },
                                {
                                    "code": "const f111 = (x, i, a) => x + i;",
                                    "line": 47,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var _mp = x => x + 'Array';",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var _mp3 = x => x + i;",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var _mp4 = (x, i) => x + i;",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var _mp5 = function (x, i) {\n  return x + i;\n};",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.map.filter.join.js": [
                                {
                                    "code": "const func2 = require('func2');",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "const arr = [1, 2, 3];",
                                    "line": 4,
                                    "collumn": 0
                                },
                                {
                                    "code": "const obj = {\n    i: 1,\n};",
                                    "line": 5,
                                    "collumn": 0
                                },
                                {
                                    "code": "const func1 = (x, i, a) => x + i - a[0];",
                                    "line": 10,
                                    "collumn": 0
                                },
                                {
                                    "code": "const func3 = (x, i) => x > 0;",
                                    "line": 11,
                                    "collumn": 0
                                },
                                {
                                    "code": "const y = arr.map(func1).filter(func3).join(' ');",
                                    "line": 12,
                                    "collumn": 0
                                },
                                {
                                    "code": "const x = arr\n    .map(String)\n    .filter(function (x) {\n        return x > this.i;\n    }, obj)\n    .join();",
                                    "line": 15,
                                    "collumn": 0
                                },
                                {
                                    "code": "const z = arr\n    .map(func2)\n    .filter((x) => x > 0.5)\n    .join();",
                                    "line": 41,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayFilterJoinHelper: _afjh\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterJoinHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayMapFilterJoinHelperWithFilterThis: _amfjhwft\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapFilterJoinHelperWithFilterThis\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayMapFilterJoinHelperWithMapThis: _amfjhwmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapFilterJoinHelperWithMapThis\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayMapFilterJoinHelperWithMapAndFilterThis: _amfjhwmft\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapFilterJoinHelperWithMapAndFilterThis\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.map.filter.js": [
                                {
                                    "code": "const func2 = require('func2');",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "const arr = [1, 2, 3];",
                                    "line": 4,
                                    "collumn": 0
                                },
                                {
                                    "code": "const obj = {\n    i: 1,\n};",
                                    "line": 5,
                                    "collumn": 0
                                },
                                {
                                    "code": "const func1 = (x, i, a) => x + i - a[0];",
                                    "line": 10,
                                    "collumn": 0
                                },
                                {
                                    "code": "const func3 = (x, i) => x > 0;",
                                    "line": 11,
                                    "collumn": 0
                                },
                                {
                                    "code": "const y = arr.map(func1).filter(func3);",
                                    "line": 12,
                                    "collumn": 0
                                },
                                {
                                    "code": "const x = arr.map(String).filter(function (x) {\n    return x > this.i;\n}, obj);",
                                    "line": 15,
                                    "collumn": 0
                                },
                                {
                                    "code": "const z = arr.map(func2).filter((x) => x > 0.5);",
                                    "line": 39,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayMapFilterHelperWithFilterThis: _amfhwft\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapFilterHelperWithFilterThis\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayFilterMapHelper: _afmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterMapHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayMapHelperWithMapThis: _amhwmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapHelperWithMapThis\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayMapFilterHelperWithMapAndFilterThis: _amfhwfmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapFilterHelperWithMapAndFilterThis\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.map.fiorEach.js": [
                                {
                                    "code": "const arr = [1, 2, 3];",
                                    "line": 2,
                                    "collumn": 0
                                },
                                {
                                    "code": "const obj = {\n    i: 1,\n};",
                                    "line": 3,
                                    "collumn": 0
                                },
                                {
                                    "code": "const func3 = (x, i, a) => {\n    x = x + 1;\n};",
                                    "line": 8,
                                    "collumn": 0
                                },
                                {
                                    "code": "const y = arr.map((x) => x).forEach(func3);",
                                    "line": 11,
                                    "collumn": 0
                                },
                                {
                                    "code": "const o = {};",
                                    "line": 13,
                                    "collumn": 0
                                },
                                {
                                    "code": "const x1 = arr\n    .map(function (x) {\n        return x;\n    })\n    .forEach(function (x) {\n        o[i] = x + this.i;\n    }, obj);",
                                    "line": 16,
                                    "collumn": 0
                                },
                                {
                                    "code": "const x2 = arr\n    .map(function (x) {\n        return x + this.i;\n    }, obj)\n    .forEach(function (x) {\n        o[i] = x + this.i;\n    }, obj);",
                                    "line": 24,
                                    "collumn": 0
                                },
                                {
                                    "code": "const x3 = arr\n    .map(function (x) {\n        return x + this.i;\n    }, obj)\n    .forEach(function (x) {\n        o[i] = x;\n    });",
                                    "line": 32,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayMapForEachHelper: _amfeh\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapForEachHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayMapForEachHelperWithForEachThis: _amfehwfet\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapForEachHelperWithForEachThis\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayMapForEachHelperWithMapAndForEachThis: _amfehwmfet\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapForEachHelperWithMapAndForEachThis\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayMapForEachHelperWithMapThis: _amfehwmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapForEachHelperWithMapThis\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.map.join unfold.js": [
                                {
                                    "code": "const f = (x, i) => x + i;",
                                    "line": 17,
                                    "collumn": 0
                                },
                                {
                                    "code": "const f1 = (x, i, a) => x + i;",
                                    "line": 24,
                                    "collumn": 0
                                },
                                {
                                    "code": "const f2 = () => [1, 2, 3].map(f).join('-');",
                                    "line": 31,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var _mp5 = (x, i, a) => x + i;",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "const f3 = () => [1, 2, 3].map((x, i, a) => x + i).join('-');",
                                    "line": 34,
                                    "collumn": 0
                                },
                                {
                                    "code": "const f4 = () => [1, 2, 3].map((x, i, a) => x + a[i]).join('-');",
                                    "line": 37,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var _mp = x => x;",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var _mp2 = (x, i) => x + i;",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var _mp3 = function (x, i) {\n  return x + i;\n};",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var _mp4 = (x, i, a) => x + i;",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayJoinHelper: _ajh\n} = require(\"/babel-preset-perf/dist/helpers/arrayJoinHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.map.join.js": [
                                {
                                    "code": "const func2 = require('func2');",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "const arr = [1, 2, 3];",
                                    "line": 4,
                                    "collumn": 0
                                },
                                {
                                    "code": "const func1 = (x, i, a) => x + i - a[0];",
                                    "line": 7,
                                    "collumn": 0
                                },
                                {
                                    "code": "const y = arr.map(func1).join('|');",
                                    "line": 8,
                                    "collumn": 0
                                },
                                {
                                    "code": "const x = arr.map(String).join();",
                                    "line": 11,
                                    "collumn": 0
                                },
                                {
                                    "code": "const z = arr.map(func2).join();",
                                    "line": 30,
                                    "collumn": 0
                                },
                                {
                                    "code": "const obj = {\n    i: 1,\n};",
                                    "line": 32,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayJoinHelper: _ajh\n} = require(\"/babel-preset-perf/dist/helpers/arrayJoinHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayMapJoinHelper: _amjh\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapJoinHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayMapHelper: _amh\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayMapJoinHelperWithMapThis: _amjhwmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapJoinHelperWithMapThis\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.map.js": [
                                {
                                    "code": "const func2 = require('func2');",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "const arr = [1, 2, 3];",
                                    "line": 4,
                                    "collumn": 0
                                },
                                {
                                    "code": "const func1 = (x, i, a) => x + i - a[0];",
                                    "line": 7,
                                    "collumn": 0
                                },
                                {
                                    "code": "const y = arr.map(func1);",
                                    "line": 8,
                                    "collumn": 0
                                },
                                {
                                    "code": "const x = arr.map(String);",
                                    "line": 11,
                                    "collumn": 0
                                },
                                {
                                    "code": "const z = arr.map(func2);",
                                    "line": 27,
                                    "collumn": 0
                                },
                                {
                                    "code": "const obj = {\n    i: 1,\n};",
                                    "line": 29,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayMapHelper: _amh\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayMapHelperWithMapThis: _amhwmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapHelperWithMapThis\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.map.reduce.js": [
                                {
                                    "code": "const func2 = require('func2');",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "const arr = [1, 2, 3];",
                                    "line": 4,
                                    "collumn": 0
                                },
                                {
                                    "code": "const func1 = (x, i, a) => x + i - a[0];",
                                    "line": 7,
                                    "collumn": 0
                                },
                                {
                                    "code": "const y = arr.map(func1).reduce((acc, x) => acc + x, 0);",
                                    "line": 8,
                                    "collumn": 0
                                },
                                {
                                    "code": "const x = arr.map(Number).reduce((acc, x) => acc + x, 0);",
                                    "line": 11,
                                    "collumn": 0
                                },
                                {
                                    "code": "const z = arr.map(func2).reduce((acc, x) => acc + x, 0);",
                                    "line": 30,
                                    "collumn": 0
                                },
                                {
                                    "code": "const obj = {\n    i: 1,\n};",
                                    "line": 32,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayMapReduceHelper: _amrh\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapReduceHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayMapHelper: _amh\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arrayMapReduceHelperWithMapThis: _amrhwmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapReduceHelperWithMapThis\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.slice.every.js": [
                                {
                                    "code": "const nums = [1, 2, 3];",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "const obj = { i: 1 };",
                                    "line": 10,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arraySliceEveryHelper: _aseh\n} = require(\"/babel-preset-perf/dist/helpers/arraySliceEveryHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arraySliceEveryHelperWithEveryThis: _asehwet\n} = require(\"/babel-preset-perf/dist/helpers/arraySliceEveryHelperWithEveryThis\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.slice.map.join.js": [
                                {
                                    "code": "const arr = [1, 2, 3, 4, 5];",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "const start = 1;",
                                    "line": 2,
                                    "collumn": 0
                                },
                                {
                                    "code": "const end = 3;",
                                    "line": 3,
                                    "collumn": 0
                                },
                                {
                                    "code": "const obj = { i: 1 };",
                                    "line": 4,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arraySliceMapJoinHelper: _asmjh\n} = require(\"/babel-preset-perf/dist/helpers/arraySliceMapJoinHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  arraySliceMapJoinHelperWithMapThis: _asmjhwmt\n} = require(\"/babel-preset-perf/dist/helpers/arraySliceMapJoinHelperWithMapThis\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Object expression with spread.js": [
                                {
                                    "code": "const x = { a: { ...obj, a: 1, c: 2, ...b, d: 3 }, e: { ...c }, f };",
                                    "line": 5,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Object.entries.filter.map.join.js": [
                                {
                                    "code": "const o = { i: 1 };",
                                    "line": 6,
                                    "collumn": 0
                                },
                                {
                                    "code": "const obj = { abcd: 1, bcd: 2, cd: 0 };",
                                    "line": 7,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  objectEntriesFilterMapJoinHelper: _oefmjt\n} = require(\"/babel-preset-perf/dist/helpers/objectEntriesFilterMapJoinHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  objectEntriesFilterMapJoinHelperWithFilterThis: _oefmjtwft\n} = require(\"/babel-preset-perf/dist/helpers/objectEntriesFilterMapJoinHelperWithFilterThis\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  objectEntriesFilterMapJoinHelperWithMapThis: _oefmjtwmt\n} = require(\"/babel-preset-perf/dist/helpers/objectEntriesFilterMapJoinHelperWithMapThis\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  objectEntriesFilterMapJoinHelperWithFilterAndMapThis: _oefmjtwfmt\n} = require(\"/babel-preset-perf/dist/helpers/objectEntriesFilterMapJoinHelperWithFilterAndMapThis\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Object.entries.forEach.js": [
                                {
                                    "code": "const obj = { i: 1 };",
                                    "line": 6,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  objectEntriesForEachHelper: _oefeh\n} = require(\"/babel-preset-perf/dist/helpers/objectEntriesForEachHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  objectEntriesForEachHelperWithForEachThis: _oefehwfet\n} = require(\"/babel-preset-perf/dist/helpers/objectEntriesForEachHelperWithForEachThis\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Object.entries.map.js": [
                                {
                                    "code": "const obj = { i: 1 };",
                                    "line": 3,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  objectEntriesMapHelper: _oemh\n} = require(\"/babel-preset-perf/dist/helpers/objectEntriesMapHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  objectEntriesMapHelperWithMapThis: _oemhwmt\n} = require(\"/babel-preset-perf/dist/helpers/objectEntriesMapHelperWithMapThis\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Object.entries.reduce.js": [
                                {
                                    "code": "generated: var {\n  objectEntriesReduceHelper: _oerh\n} = require(\"/babel-preset-perf/dist/helpers/objectEntriesReduceHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Object.values[0].js": [
                                {
                                    "code": "const objs = { a: 1, b: 2 };",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "const v = Object.values(obj)[0];",
                                    "line": 3,
                                    "collumn": 0
                                },
                                {
                                    "code": "const v1 = Object.values({ a: 1, b: 2 })[0];",
                                    "line": 4,
                                    "collumn": 0
                                },
                                {
                                    "code": "generated: var {\n  objectValuesFirstItemHelper: _ovfih\n} = require(\"/babel-preset-perf/dist/helpers/objectValuesFirstItemHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/String.slice.js": [
                                {
                                    "code": "generated: var {\n  stringSliceHelper: _ssh\n} = require(\"/babel-preset-perf/dist/helpers/stringSliceHelper\");",
                                    "line": 0,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Transform const and let with var.js": [
                                {
                                    "code": "let s = '';",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "const a = 1;",
                                    "line": 2,
                                    "collumn": 0
                                },
                                {
                                    "code": "for (let i = 0; i < 100; i++) {\n    console.log(i);\n}",
                                    "line": 4,
                                    "collumn": 5
                                }
                            ],
                            "/babel-preset-perf/tests/demo/index.js": [
                                {
                                    "code": "const a = 1;",
                                    "line": 1,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Array destructuring": {
                        "total": 10,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Array destructuring.js": [
                                {
                                    "code": "const [a1, b1] = array;",
                                    "line": 7,
                                    "collumn": 6
                                },
                                {
                                    "code": "const [a2, , b2] = array;",
                                    "line": 8,
                                    "collumn": 6
                                },
                                {
                                    "code": "let [a3 = aDefault, b3] = array;",
                                    "line": 9,
                                    "collumn": 4
                                },
                                {
                                    "code": "const [a4, b4, ...rest1] = array;",
                                    "line": 10,
                                    "collumn": 6
                                },
                                {
                                    "code": "let [a5, , b5, ...rest2] = array;",
                                    "line": 11,
                                    "collumn": 4
                                },
                                {
                                    "code": "const [a, b] = getValue();",
                                    "line": 17,
                                    "collumn": 6
                                },
                                {
                                    "code": "const [a11, b11] = [1, 2, 3];",
                                    "line": 18,
                                    "collumn": 6
                                },
                                {
                                    "code": "const [a22, b22] = arr;",
                                    "line": 19,
                                    "collumn": 6
                                },
                                {
                                    "code": "const [allProps, properties] = schemaProperties('properties'),\n    [allOptProps, optProperties] = schemaProperties('optionalProperties');",
                                    "line": 22,
                                    "collumn": 6
                                },
                                {
                                    "code": "const [allProps, properties] = schemaProperties('properties'),\n    [allOptProps, optProperties] = schemaProperties('optionalProperties');",
                                    "line": 23,
                                    "collumn": 4
                                }
                            ]
                        }
                    },
                    "Array.filter.forEach": {
                        "total": 4,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Array.filter.fiorEach.js": [
                                {
                                    "code": "const y = arr.filter(func).forEach(func3);",
                                    "line": 13,
                                    "collumn": 0
                                },
                                {
                                    "code": "const x1 = arr\n    .filter(function (x) {\n        return x > 1;\n    })\n    .forEach(function (x) {\n        o[i] = x + this.i;\n    }, obj);",
                                    "line": 15,
                                    "collumn": 0
                                },
                                {
                                    "code": "const x2 = arr\n    .filter(function (x) {\n        return x > this.i;\n    }, obj)\n    .forEach(function (x) {\n        o[i] = x + this.i;\n    }, obj);",
                                    "line": 23,
                                    "collumn": 0
                                },
                                {
                                    "code": "const x3 = arr\n    .filter(function (x) {\n        return x > this.i;\n    }, obj)\n    .forEach(function (x) {\n        o[i] = x;\n    });",
                                    "line": 31,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Array.filter.join": {
                        "total": 5,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Array.filter.join.js": [
                                {
                                    "code": "const y = arr.filter(func3).join(' ');",
                                    "line": 9,
                                    "collumn": 0
                                },
                                {
                                    "code": "const x = arr.filter(func, obj).join();",
                                    "line": 15,
                                    "collumn": 0
                                },
                                {
                                    "code": "return [...a, ...b]\n            .sort()\n            .filter((x) => x > 0.5)\n            .join();",
                                    "line": 20,
                                    "collumn": 8
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.map.filter.join.js": [
                                {
                                    "code": "const y = arr.map(func1).filter(func3).join(' ');",
                                    "line": 12,
                                    "collumn": 0
                                },
                                {
                                    "code": "const z = arr\n    .map(func2)\n    .filter((x) => x > 0.5)\n    .join();",
                                    "line": 41,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Array.filter.length as boolean": {
                        "total": 14,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Array.filter.length as boolean.js": [
                                {
                                    "code": "arr.filter(Boolean).length ? 1 : 0;",
                                    "line": 2,
                                    "collumn": 0
                                },
                                {
                                    "code": "arr.filter(Boolean).length > 0 ? 1 : 0;",
                                    "line": 5,
                                    "collumn": 0
                                },
                                {
                                    "code": "arr && arr.filter(Boolean).length;",
                                    "line": 8,
                                    "collumn": 0
                                },
                                {
                                    "code": "if (arr.filter(Boolean).length) {\n    console.log('ok');\n}",
                                    "line": 14,
                                    "collumn": 0
                                },
                                {
                                    "code": "arr.filter(Boolean).length > 0;",
                                    "line": 21,
                                    "collumn": 0
                                },
                                {
                                    "code": "arr.filter(Boolean).length !== 0;",
                                    "line": 24,
                                    "collumn": 0
                                },
                                {
                                    "code": "0 < arr.filter(Boolean).length;",
                                    "line": 27,
                                    "collumn": 4
                                },
                                {
                                    "code": "0 !== arr.filter(Boolean).length;",
                                    "line": 30,
                                    "collumn": 6
                                },
                                {
                                    "code": "0 === arr.filter(Boolean).length;",
                                    "line": 33,
                                    "collumn": 6
                                },
                                {
                                    "code": "arr.filter(Boolean).length === 0;",
                                    "line": 36,
                                    "collumn": 0
                                },
                                {
                                    "code": "!!arr.filter(Boolean).length;",
                                    "line": 55,
                                    "collumn": 2
                                },
                                {
                                    "code": "!arr.filter(Boolean).length;",
                                    "line": 58,
                                    "collumn": 0
                                },
                                {
                                    "code": "Boolean(arr.filter(Boolean).length);",
                                    "line": 61,
                                    "collumn": 8
                                },
                                {
                                    "code": "if (\n    arr.filter(function (x) {\n        return x > this.i;\n    }, obj).length\n) {\n    console.log('ok');\n}",
                                    "line": 65,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Array.filter.length": {
                        "total": 6,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Array.filter.length as boolean.js": [
                                {
                                    "code": "arr.filter(Boolean).length;",
                                    "line": 11,
                                    "collumn": 0
                                },
                                {
                                    "code": "arr.filter(Boolean).length > 5;",
                                    "line": 41,
                                    "collumn": 0
                                },
                                {
                                    "code": "arr.filter(Boolean).length !== 1;",
                                    "line": 44,
                                    "collumn": 0
                                },
                                {
                                    "code": "2 < arr.filter(Boolean).length;",
                                    "line": 47,
                                    "collumn": 0
                                },
                                {
                                    "code": "1 !== arr.filter(Boolean).length;",
                                    "line": 50,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.filter.length.js": [
                                {
                                    "code": "arr.filter((x) => x > 0.5).length;",
                                    "line": 3,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Array.filter.map.join": {
                        "total": 4,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Array.filter.map.join.js": [
                                {
                                    "code": "arr.filter((x) => x > 0.5)\n    .map((x, i) => x + i)\n    .join(' = ');",
                                    "line": 4,
                                    "collumn": 0
                                },
                                {
                                    "code": "arr.filter(function (x) {\n    return x > this.j;\n}, obj)\n    .map((x, i) => x + i)\n    .join(' ');",
                                    "line": 14,
                                    "collumn": 0
                                },
                                {
                                    "code": "arr.filter((x) => x > 0.5)\n    .map(function (x, i) {\n        return x + this.i;\n    }, obj)\n    .join();",
                                    "line": 21,
                                    "collumn": 0
                                },
                                {
                                    "code": "arr.filter(function (x) {\n        return x > this.j;\n    }, obj)\n        .map(function (x, i) {\n            return x + this.i;\n        }, obj)\n        .join(' = ');",
                                    "line": 29,
                                    "collumn": 4
                                }
                            ]
                        }
                    },
                    "Array.filter.map": {
                        "total": 5,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Array.filter.map.js": [
                                {
                                    "code": "arr.filter((x) => x > 0.5).map((x, i) => x + i);",
                                    "line": 4,
                                    "collumn": 0
                                },
                                {
                                    "code": "arr.filter(function (x) {\n    return x > this.j;\n}, obj).map((x, i) => x + i);",
                                    "line": 12,
                                    "collumn": 0
                                },
                                {
                                    "code": "arr.filter((x) => x > 0.5).map(function (x, i) {\n    return x + this.i;\n}, obj);",
                                    "line": 17,
                                    "collumn": 0
                                },
                                {
                                    "code": "arr.filter(function (x) {\n        return x > this.j;\n    }, obj).map(function (x, i) {\n        return x + this.i;\n    }, obj);",
                                    "line": 23,
                                    "collumn": 4
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.map.filter.js": [
                                {
                                    "code": "return [...a, ...b]\n            .map(function (x) {\n                return x + this.i;\n            }, obj)\n            .filter((x) => x > 0.5)\n            .map(func);",
                                    "line": 27,
                                    "collumn": 8
                                }
                            ]
                        }
                    },
                    "Array.map.reduce": {
                        "total": 5,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Array.filter.reduce.js": [
                                {
                                    "code": "const y = arr.map(func1).reduce((acc, x) => acc + x, 0);",
                                    "line": 8,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.map.reduce.js": [
                                {
                                    "code": "const y = arr.map(func1).reduce((acc, x) => acc + x, 0);",
                                    "line": 8,
                                    "collumn": 0
                                },
                                {
                                    "code": "const x = arr.map(Number).reduce((acc, x) => acc + x, 0);",
                                    "line": 11,
                                    "collumn": 0
                                },
                                {
                                    "code": "return [...a, ...b]\n            .map((x, i) => x * i)\n            .map(func)\n            .reduce((acc, x) => acc + x, 0);",
                                    "line": 20,
                                    "collumn": 8
                                },
                                {
                                    "code": "arr.map(function (x) {\n    return x + this.i;\n}, obj).reduce((acc, x) => acc + x, 0);",
                                    "line": 35,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Array.filter.reduce": {
                        "total": 3,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Array.filter.reduce.js": [
                                {
                                    "code": "const x = arr1.filter((x) => x > 1).reduce((acc, x) => acc + x, 0);",
                                    "line": 12,
                                    "collumn": 0
                                },
                                {
                                    "code": "return [...a, ...b]\n            .map((x, i) => x * i)\n            .filter(func)\n            .reduce((acc, x) => acc + x, 0);",
                                    "line": 21,
                                    "collumn": 8
                                },
                                {
                                    "code": "arr.filter(function (x) {\n    return x > this.i;\n}, obj).reduce((acc, x) => acc + x, 0);",
                                    "line": 40,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Array.map": {
                        "total": 8,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Array.filter.reduce.js": [
                                {
                                    "code": "return [...a, ...b]\n            .map((x, i) => x * i)\n            .filter(func)\n            .reduce((acc, x) => acc + x, 0);",
                                    "line": 21,
                                    "collumn": 8
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.map.filter.js": [
                                {
                                    "code": "return [...a, ...b]\n            .map(function (x) {\n                return x + this.i;\n            }, obj)\n            .filter((x) => x > 0.5)\n            .map(func);",
                                    "line": 27,
                                    "collumn": 8
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.map.join.js": [
                                {
                                    "code": "return [...a, ...b]\n            .map((x, i) => x * i)\n            .map(func)\n            .join('--');",
                                    "line": 20,
                                    "collumn": 8
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.map.js": [
                                {
                                    "code": "const x = arr.map(String);",
                                    "line": 11,
                                    "collumn": 0
                                },
                                {
                                    "code": "return [...a, ...b].map((x, i) => x * i).map(func);",
                                    "line": 20,
                                    "collumn": 8
                                },
                                {
                                    "code": "return [...a, ...b].map((x, i) => x * i).map(func);",
                                    "line": 20,
                                    "collumn": 8
                                },
                                {
                                    "code": "arr.map(function (x) {\n    return x + this.i;\n}, obj);",
                                    "line": 32,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.map.reduce.js": [
                                {
                                    "code": "return [...a, ...b]\n            .map((x, i) => x * i)\n            .map(func)\n            .reduce((acc, x) => acc + x, 0);",
                                    "line": 20,
                                    "collumn": 8
                                }
                            ]
                        }
                    },
                    "Array.join unfold": {
                        "total": 6,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Array.join unfold.js": [
                                {
                                    "code": "const c = [1].join();",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "const a = [1, 2, 3, 4, 5].join();",
                                    "line": 3,
                                    "collumn": 0
                                },
                                {
                                    "code": "const a1 = [\"default-src 'none';\", \"base-uri 'none';\", \"object-src 'none';\"].join(' ');",
                                    "line": 5,
                                    "collumn": 0
                                },
                                {
                                    "code": "const a2 = [s0 ? 5 : 0, 1, 'two', 'three', true, null, undefined, s1, s12].join(a.S);",
                                    "line": 7,
                                    "collumn": 0
                                },
                                {
                                    "code": "const a3 = [s1, s12, s13, s14].join('\\n' + sep);",
                                    "line": 9,
                                    "collumn": 0
                                },
                                {
                                    "code": "const a4 = [\"default-src 'none';\", \"base-uri 'none';\", \"object-src 'none';\"].join(sep);",
                                    "line": 11,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Array.join": {
                        "total": 6,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Array.join.js": [
                                {
                                    "code": "arr.join();",
                                    "line": 5,
                                    "collumn": 0
                                },
                                {
                                    "code": "arr.join(' - ');",
                                    "line": 6,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.map.join unfold.js": [
                                {
                                    "code": "[1, 2, 3].map((x, i, a) => x + a[i]).join();",
                                    "line": 28,
                                    "collumn": 0
                                },
                                {
                                    "code": "const f4 = () => [1, 2, 3].map((x, i, a) => x + a[i]).join('-');",
                                    "line": 37,
                                    "collumn": 0
                                }
                            ],
                            "/babel-preset-perf/tests/demo/Array.map.join.js": [
                                {
                                    "code": "const y = arr.map(func1).join('|');",
                                    "line": 8,
                                    "collumn": 0
                                },
                                {
                                    "code": "const z = arr.map(func2).join();",
                                    "line": 30,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Array.map unfold": {
                        "total": 11,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Array.map unfold.js": [
                                {
                                    "code": "const a = [\n    'Int8',\n    'Uint8',\n    'Uint8Clamped',\n    'Int16',\n    'Uint16',\n    'Int32',\n    'Uint32',\n    'Float32',\n    'Float64',\n    'BigInt64',\n    'BigUint64',\n].map((x) => x + 'Array');",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "const schema = (root) => ({\n    metadata: {\n        union: [\n            emptyForm,\n            refForm,\n            typeForm,\n            enumForm,\n            elementsForm,\n            propertiesForm,\n            optionalPropertiesForm,\n            discriminatorForm,\n            valuesForm,\n        ].map((s) => s(root)),\n    },\n});",
                                    "line": 15,
                                    "collumn": 0
                                },
                                {
                                    "code": "[1, 2, 3].map(f);",
                                    "line": 36,
                                    "collumn": 0
                                },
                                {
                                    "code": "[1, 2, 3].map(f1);",
                                    "line": 40,
                                    "collumn": 0
                                },
                                {
                                    "code": "[1, 2, 3].map(f111);",
                                    "line": 48,
                                    "collumn": 0
                                },
                                {
                                    "code": "[1, 2, 3].map((x) => x + i);",
                                    "line": 51,
                                    "collumn": 0
                                },
                                {
                                    "code": "[1, 2, 3].map((x, i) => x + i);",
                                    "line": 54,
                                    "collumn": 0
                                },
                                {
                                    "code": "[1, 2, 3].map(function (x, i) {\n    return x + i;\n});",
                                    "line": 57,
                                    "collumn": 0
                                },
                                {
                                    "code": "[1, 2, 3].map(String);",
                                    "line": 61,
                                    "collumn": 0
                                },
                                {
                                    "code": "[1, 2, 3].map(Number);",
                                    "line": 63,
                                    "collumn": 0
                                },
                                {
                                    "code": "[1, 2, 3].map(Boolean);",
                                    "line": 65,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Array.map.filter.join": {
                        "total": 3,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Array.map.filter.join.js": [
                                {
                                    "code": "const x = arr\n    .map(String)\n    .filter(function (x) {\n        return x > this.i;\n    }, obj)\n    .join();",
                                    "line": 15,
                                    "collumn": 0
                                },
                                {
                                    "code": "return [...a, ...b]\n            .sort()\n            .map(func, obj)\n            .filter((x) => x > 0.5)\n            .join();",
                                    "line": 30,
                                    "collumn": 8
                                },
                                {
                                    "code": "arr.map(function (x) {\n    return x + this.i;\n}, obj)\n    .filter(function (x) {\n        return x > this.i;\n    }, obj)\n    .join();",
                                    "line": 46,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Array.map.filter": {
                        "total": 2,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Array.map.filter.js": [
                                {
                                    "code": "const x = arr.map(String).filter(function (x) {\n    return x > this.i;\n}, obj);",
                                    "line": 15,
                                    "collumn": 0
                                },
                                {
                                    "code": "arr.map(function (x) {\n    return x + this.i;\n}, obj).filter(function (x) {\n    return x > this.i;\n}, obj);",
                                    "line": 41,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Array.map.forEach": {
                        "total": 4,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Array.map.fiorEach.js": [
                                {
                                    "code": "const y = arr.map((x) => x).forEach(func3);",
                                    "line": 11,
                                    "collumn": 0
                                },
                                {
                                    "code": "const x1 = arr\n    .map(function (x) {\n        return x;\n    })\n    .forEach(function (x) {\n        o[i] = x + this.i;\n    }, obj);",
                                    "line": 16,
                                    "collumn": 0
                                },
                                {
                                    "code": "const x2 = arr\n    .map(function (x) {\n        return x + this.i;\n    }, obj)\n    .forEach(function (x) {\n        o[i] = x + this.i;\n    }, obj);",
                                    "line": 24,
                                    "collumn": 0
                                },
                                {
                                    "code": "const x3 = arr\n    .map(function (x) {\n        return x + this.i;\n    }, obj)\n    .forEach(function (x) {\n        o[i] = x;\n    });",
                                    "line": 32,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Array.map.join unfold": {
                        "total": 9,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Array.map.join unfold.js": [
                                {
                                    "code": "[1, 2, 3].map(String).join();",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "[1, 2, 3].map((x) => x).join();",
                                    "line": 4,
                                    "collumn": 0
                                },
                                {
                                    "code": "[1, 2, 3].map((x, i) => x + i).join();",
                                    "line": 7,
                                    "collumn": 0
                                },
                                {
                                    "code": "[1, 2, 3]\n    .map(function (x, i) {\n        return x + i;\n    })\n    .join();",
                                    "line": 10,
                                    "collumn": 0
                                },
                                {
                                    "code": "[1, 2, 3].map(f).join();",
                                    "line": 18,
                                    "collumn": 0
                                },
                                {
                                    "code": "[1, 2, 3].map((x, i, a) => x + i).join();",
                                    "line": 21,
                                    "collumn": 0
                                },
                                {
                                    "code": "[1, 2, 3].map(f1).join();",
                                    "line": 25,
                                    "collumn": 0
                                },
                                {
                                    "code": "const f2 = () => [1, 2, 3].map(f).join('-');",
                                    "line": 31,
                                    "collumn": 0
                                },
                                {
                                    "code": "const f3 = () => [1, 2, 3].map((x, i, a) => x + i).join('-');",
                                    "line": 34,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Array.map.join": {
                        "total": 3,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Array.map.join.js": [
                                {
                                    "code": "const x = arr.map(String).join();",
                                    "line": 11,
                                    "collumn": 0
                                },
                                {
                                    "code": "return [...a, ...b]\n            .map((x, i) => x * i)\n            .map(func)\n            .join('--');",
                                    "line": 20,
                                    "collumn": 8
                                },
                                {
                                    "code": "arr.map(function (x) {\n    return x + this.i;\n}, obj).join();",
                                    "line": 35,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Array.slice.every": {
                        "total": 7,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Array.slice.every.js": [
                                {
                                    "code": "nums.slice().every((x, i) => x > 1);",
                                    "line": 3,
                                    "collumn": 0
                                },
                                {
                                    "code": "nums.slice(start).every((x, i) => x > 1);",
                                    "line": 4,
                                    "collumn": 0
                                },
                                {
                                    "code": "nums.slice(start, end).every((x, i) => x > 1);",
                                    "line": 5,
                                    "collumn": 0
                                },
                                {
                                    "code": "nums.slice(-3).every((x, i) => x > 1);",
                                    "line": 6,
                                    "collumn": 0
                                },
                                {
                                    "code": "nums.slice(start, -1).every((x, i) => x > 1);",
                                    "line": 7,
                                    "collumn": 0
                                },
                                {
                                    "code": "nums.slice(-5, -1).every((x, i) => x > 1);",
                                    "line": 8,
                                    "collumn": 0
                                },
                                {
                                    "code": "nums.slice(start, end).every(function (x, i) {\n    return x > this.i;\n}, obj);",
                                    "line": 11,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Array.slice.map.join": {
                        "total": 7,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Array.slice.map.join.js": [
                                {
                                    "code": "arr.slice(start, end)\n    .map((x, i) => x + i)\n    .join(' ');",
                                    "line": 6,
                                    "collumn": 0
                                },
                                {
                                    "code": "arr.slice()\n    .map((x, i) => x + i)\n    .join(' ');",
                                    "line": 10,
                                    "collumn": 0
                                },
                                {
                                    "code": "arr.slice(1)\n    .map((x, i) => x + i)\n    .join(' ');",
                                    "line": 14,
                                    "collumn": 0
                                },
                                {
                                    "code": "arr.slice(-1)\n    .map((x, i) => x + i)\n    .join(' ');",
                                    "line": 18,
                                    "collumn": 0
                                },
                                {
                                    "code": "arr.slice(-3, -1)\n    .map((x, i) => x + i)\n    .join(' ');",
                                    "line": 22,
                                    "collumn": 0
                                },
                                {
                                    "code": "arr.slice(0, -1)\n    .map((x, i) => x + i)\n    .join(' ');",
                                    "line": 26,
                                    "collumn": 0
                                },
                                {
                                    "code": "arr.slice(start, end)\n    .map(function (x, i) {\n        return x + this.i;\n    }, obj)\n    .join(' ');",
                                    "line": 30,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Object expression with spread": {
                        "total": 1,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Object expression with spread.js": [
                                {
                                    "code": "const x = { a: { ...obj, a: 1, c: 2, ...b, d: 3 }, e: { ...c }, f };",
                                    "line": 5,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Object.entries.filter.map.join": {
                        "total": 4,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Object.entries.filter.map.join.js": [
                                {
                                    "code": "Object.entries(obj)\n    .filter(([key, val], i) => key.length > 1 && val > -1)\n    .map(([key, val]) => key.length + val)\n    .join('-');",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "Object.entries(obj)\n    .filter(function ([key, val], i) {\n        return key.length > this.i && val > -1;\n    }, o)\n    .map(([key, val]) => key.length + val)\n    .join('-');",
                                    "line": 10,
                                    "collumn": 0
                                },
                                {
                                    "code": "Object.entries(obj)\n    .filter(([key, val], i) => key.length > 1 && val > -1)\n    .map(function ([key, val]) {\n        return key.length + val + this.i;\n    }, o)\n    .join('-');",
                                    "line": 18,
                                    "collumn": 0
                                },
                                {
                                    "code": "Object.entries(obj)\n    .filter(function ([key, val], i) {\n        return key.length > this.i && val > -1;\n    }, o)\n    .map(function ([key, val]) {\n        return key.length + val + this.i;\n    }, o)\n    .join('-');",
                                    "line": 26,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Object.entries.forEach": {
                        "total": 2,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Object.entries.forEach.js": [
                                {
                                    "code": "Object.entries(smallObj).forEach(([key, val], i) => {\n    res = key.length + String(val).length + i;\n});",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "Object.entries(smallObj).forEach(function ([key, val], i) {\n    res = key.length + String(val).length + this.i;\n}, obj);",
                                    "line": 7,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Object.entries.map": {
                        "total": 2,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Object.entries.map.js": [
                                {
                                    "code": "Object.entries(smallObj).map(([key, val], i) => key.length + String(val).length + i);",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "Object.entries(smallObj).map(function ([key, val], i) {\n    return key.length + String(val).length + this.i;\n}, obj);",
                                    "line": 4,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Object.entries.reduce": {
                        "total": 2,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Object.entries.reduce.js": [
                                {
                                    "code": "Object.entries(obj).reduce((acc, [key, val], i) => acc + key.length + String(val).length + i, 0);",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "Object.entries({ a: 1, b: 2 }).reduce((acc, [key, val], i) => acc + key.length + String(val).length + i, 0);",
                                    "line": 2,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "Object.values[0]": {
                        "total": 2,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/Object.values[0].js": [
                                {
                                    "code": "const v = Object.values(obj)[0];",
                                    "line": 3,
                                    "collumn": 0
                                },
                                {
                                    "code": "const v1 = Object.values({ a: 1, b: 2 })[0];",
                                    "line": 4,
                                    "collumn": 0
                                }
                            ]
                        }
                    },
                    "String.slice": {
                        "total": 5,
                        "byModules": {
                            "/babel-preset-perf/tests/demo/String.slice.js": [
                                {
                                    "code": "'String'.slice(1, 5);",
                                    "line": 1,
                                    "collumn": 0
                                },
                                {
                                    "code": "'String'.slice(1);",
                                    "line": 2,
                                    "collumn": 0
                                },
                                {
                                    "code": "'String'.slice();",
                                    "line": 3,
                                    "collumn": 0
                                },
                                {
                                    "code": "'12345'.slice(1, -2);",
                                    "line": 4,
                                    "collumn": 0
                                },
                                {
                                    "code": "[1, 2, 3].slice(4, 8);",
                                    "line": 6,
                                    "collumn": 0
                                }
                            ]
                        }
                    }
                }
            },
            "byModules": {
                "total": 29,
                "modules": {
                    "/babel-preset-perf/tests/demo/Array destructuring.js": {
                        "total": 22,
                        "byTransformations": [
                            {
                                "code": "const array = [1, 2, 3, 4, 5];",
                                "line": 5,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const [] = array;",
                                "line": 6,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const [a1, b1] = array;",
                                "line": 7,
                                "collumn": 6,
                                "transformation": "Array destructuring"
                            },
                            {
                                "code": "const [a1, b1] = array;",
                                "line": 7,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const [a2, , b2] = array;",
                                "line": 8,
                                "collumn": 6,
                                "transformation": "Array destructuring"
                            },
                            {
                                "code": "const [a2, , b2] = array;",
                                "line": 8,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "let [a3 = aDefault, b3] = array;",
                                "line": 9,
                                "collumn": 4,
                                "transformation": "Array destructuring"
                            },
                            {
                                "code": "let [a3 = aDefault, b3] = array;",
                                "line": 9,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const [a4, b4, ...rest1] = array;",
                                "line": 10,
                                "collumn": 6,
                                "transformation": "Array destructuring"
                            },
                            {
                                "code": "const [a4, b4, ...rest1] = array;",
                                "line": 10,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "let [a5, , b5, ...rest2] = array;",
                                "line": 11,
                                "collumn": 4,
                                "transformation": "Array destructuring"
                            },
                            {
                                "code": "let [a5, , b5, ...rest2] = array;",
                                "line": 11,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const [a7, b7, ...[c7, d7]] = array;",
                                "line": 14,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const [a, b] = getValue();",
                                "line": 17,
                                "collumn": 6,
                                "transformation": "Array destructuring"
                            },
                            {
                                "code": "const [a, b] = getValue();",
                                "line": 17,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const [a11, b11] = [1, 2, 3];",
                                "line": 18,
                                "collumn": 6,
                                "transformation": "Array destructuring"
                            },
                            {
                                "code": "const [a11, b11] = [1, 2, 3];",
                                "line": 18,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const [a22, b22] = arr;",
                                "line": 19,
                                "collumn": 6,
                                "transformation": "Array destructuring"
                            },
                            {
                                "code": "const [a22, b22] = arr;",
                                "line": 19,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const [allProps, properties] = schemaProperties('properties'),\n    [allOptProps, optProperties] = schemaProperties('optionalProperties');",
                                "line": 22,
                                "collumn": 6,
                                "transformation": "Array destructuring"
                            },
                            {
                                "code": "const [allProps, properties] = schemaProperties('properties'),\n    [allOptProps, optProperties] = schemaProperties('optionalProperties');",
                                "line": 23,
                                "collumn": 4,
                                "transformation": "Array destructuring"
                            },
                            {
                                "code": "const [allProps, properties] = schemaProperties('properties'),\n    [allOptProps, optProperties] = schemaProperties('optionalProperties');",
                                "line": 22,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Array.filter.fiorEach.js": {
                        "total": 17,
                        "byTransformations": [
                            {
                                "code": "const arr = [1, 2, 3];",
                                "line": 2,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const o = {};",
                                "line": 3,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const obj = {\n    i: 1,\n};",
                                "line": 4,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const func = (x) => x > 0;",
                                "line": 8,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const func3 = (x, i) => {\n    return x > 1;\n};",
                                "line": 9,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const y = arr.filter(func).forEach(func3);",
                                "line": 13,
                                "collumn": 0,
                                "transformation": "Array.filter.forEach"
                            },
                            {
                                "code": "const y = arr.filter(func).forEach(func3);",
                                "line": 13,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const x1 = arr\n    .filter(function (x) {\n        return x > 1;\n    })\n    .forEach(function (x) {\n        o[i] = x + this.i;\n    }, obj);",
                                "line": 15,
                                "collumn": 0,
                                "transformation": "Array.filter.forEach"
                            },
                            {
                                "code": "const x1 = arr\n    .filter(function (x) {\n        return x > 1;\n    })\n    .forEach(function (x) {\n        o[i] = x + this.i;\n    }, obj);",
                                "line": 15,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const x2 = arr\n    .filter(function (x) {\n        return x > this.i;\n    }, obj)\n    .forEach(function (x) {\n        o[i] = x + this.i;\n    }, obj);",
                                "line": 23,
                                "collumn": 0,
                                "transformation": "Array.filter.forEach"
                            },
                            {
                                "code": "const x2 = arr\n    .filter(function (x) {\n        return x > this.i;\n    }, obj)\n    .forEach(function (x) {\n        o[i] = x + this.i;\n    }, obj);",
                                "line": 23,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const x3 = arr\n    .filter(function (x) {\n        return x > this.i;\n    }, obj)\n    .forEach(function (x) {\n        o[i] = x;\n    });",
                                "line": 31,
                                "collumn": 0,
                                "transformation": "Array.filter.forEach"
                            },
                            {
                                "code": "const x3 = arr\n    .filter(function (x) {\n        return x > this.i;\n    }, obj)\n    .forEach(function (x) {\n        o[i] = x;\n    });",
                                "line": 31,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayFilterForEachHelper: _affeh\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterForEachHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayFilterForEachHelperWithForEachThis: _affehwfet\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterForEachHelperWithForEachThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayFilterForEachHelperWithFilterAndForEachThis: _affehwmfet\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterForEachHelperWithFilterAndForEachThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayFilterForEachHelperWithFilterThis: _affehwmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterForEachHelperWithFilterThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Array.filter.join.js": {
                        "total": 10,
                        "byTransformations": [
                            {
                                "code": "const arr = [1, 2, 3];",
                                "line": 2,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const obj = {\n    i: 1,\n};",
                                "line": 3,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const func3 = (x, i) => x > 0;",
                                "line": 8,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const y = arr.filter(func3).join(' ');",
                                "line": 9,
                                "collumn": 0,
                                "transformation": "Array.filter.join"
                            },
                            {
                                "code": "const y = arr.filter(func3).join(' ');",
                                "line": 9,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const x = arr.filter(func, obj).join();",
                                "line": 15,
                                "collumn": 0,
                                "transformation": "Array.filter.join"
                            },
                            {
                                "code": "const x = arr.filter(func, obj).join();",
                                "line": 15,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "return [...a, ...b]\n            .sort()\n            .filter((x) => x > 0.5)\n            .join();",
                                "line": 20,
                                "collumn": 8,
                                "transformation": "Array.filter.join"
                            },
                            {
                                "code": "generated: var {\n  arrayFilterJoinHelper: _afjh\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterJoinHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayFilterJoinHelperWithFilterThis: _afjhwft\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterJoinHelperWithFilterThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Array.filter.length as boolean.js": {
                        "total": 21,
                        "byTransformations": [
                            {
                                "code": "arr.filter(Boolean).length ? 1 : 0;",
                                "line": 2,
                                "collumn": 0,
                                "transformation": "Array.filter.length as boolean"
                            },
                            {
                                "code": "arr.filter(Boolean).length > 0 ? 1 : 0;",
                                "line": 5,
                                "collumn": 0,
                                "transformation": "Array.filter.length as boolean"
                            },
                            {
                                "code": "arr && arr.filter(Boolean).length;",
                                "line": 8,
                                "collumn": 0,
                                "transformation": "Array.filter.length as boolean"
                            },
                            {
                                "code": "arr.filter(Boolean).length;",
                                "line": 11,
                                "collumn": 0,
                                "transformation": "Array.filter.length"
                            },
                            {
                                "code": "if (arr.filter(Boolean).length) {\n    console.log('ok');\n}",
                                "line": 14,
                                "collumn": 0,
                                "transformation": "Array.filter.length as boolean"
                            },
                            {
                                "code": "arr.filter(Boolean).length > 0;",
                                "line": 21,
                                "collumn": 0,
                                "transformation": "Array.filter.length as boolean"
                            },
                            {
                                "code": "arr.filter(Boolean).length !== 0;",
                                "line": 24,
                                "collumn": 0,
                                "transformation": "Array.filter.length as boolean"
                            },
                            {
                                "code": "0 < arr.filter(Boolean).length;",
                                "line": 27,
                                "collumn": 4,
                                "transformation": "Array.filter.length as boolean"
                            },
                            {
                                "code": "0 !== arr.filter(Boolean).length;",
                                "line": 30,
                                "collumn": 6,
                                "transformation": "Array.filter.length as boolean"
                            },
                            {
                                "code": "0 === arr.filter(Boolean).length;",
                                "line": 33,
                                "collumn": 6,
                                "transformation": "Array.filter.length as boolean"
                            },
                            {
                                "code": "arr.filter(Boolean).length === 0;",
                                "line": 36,
                                "collumn": 0,
                                "transformation": "Array.filter.length as boolean"
                            },
                            {
                                "code": "arr.filter(Boolean).length > 5;",
                                "line": 41,
                                "collumn": 0,
                                "transformation": "Array.filter.length"
                            },
                            {
                                "code": "arr.filter(Boolean).length !== 1;",
                                "line": 44,
                                "collumn": 0,
                                "transformation": "Array.filter.length"
                            },
                            {
                                "code": "2 < arr.filter(Boolean).length;",
                                "line": 47,
                                "collumn": 0,
                                "transformation": "Array.filter.length"
                            },
                            {
                                "code": "1 !== arr.filter(Boolean).length;",
                                "line": 50,
                                "collumn": 0,
                                "transformation": "Array.filter.length"
                            },
                            {
                                "code": "!!arr.filter(Boolean).length;",
                                "line": 55,
                                "collumn": 2,
                                "transformation": "Array.filter.length as boolean"
                            },
                            {
                                "code": "!arr.filter(Boolean).length;",
                                "line": 58,
                                "collumn": 0,
                                "transformation": "Array.filter.length as boolean"
                            },
                            {
                                "code": "Boolean(arr.filter(Boolean).length);",
                                "line": 61,
                                "collumn": 8,
                                "transformation": "Array.filter.length as boolean"
                            },
                            {
                                "code": "const obj = { i: 1 };",
                                "line": 64,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "if (\n    arr.filter(function (x) {\n        return x > this.i;\n    }, obj).length\n) {\n    console.log('ok');\n}",
                                "line": 65,
                                "collumn": 0,
                                "transformation": "Array.filter.length as boolean"
                            },
                            {
                                "code": "generated: var {\n  arrayFilterLengthHelper: _aflh\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterLengthHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Array.filter.length.js": {
                        "total": 3,
                        "byTransformations": [
                            {
                                "code": "const arr = [1, 2, 3, 4, 5];",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "arr.filter((x) => x > 0.5).length;",
                                "line": 3,
                                "collumn": 0,
                                "transformation": "Array.filter.length"
                            },
                            {
                                "code": "generated: var {\n  arrayFilterLengthHelper: _aflh\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterLengthHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Array.filter.map.join.js": {
                        "total": 10,
                        "byTransformations": [
                            {
                                "code": "const arr = [1, 2, 3];",
                                "line": 2,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "arr.filter((x) => x > 0.5)\n    .map((x, i) => x + i)\n    .join(' = ');",
                                "line": 4,
                                "collumn": 0,
                                "transformation": "Array.filter.map.join"
                            },
                            {
                                "code": "const obj = {\n    i: 1,\n    j: 0.5,\n};",
                                "line": 8,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "arr.filter(function (x) {\n    return x > this.j;\n}, obj)\n    .map((x, i) => x + i)\n    .join(' ');",
                                "line": 14,
                                "collumn": 0,
                                "transformation": "Array.filter.map.join"
                            },
                            {
                                "code": "arr.filter((x) => x > 0.5)\n    .map(function (x, i) {\n        return x + this.i;\n    }, obj)\n    .join();",
                                "line": 21,
                                "collumn": 0,
                                "transformation": "Array.filter.map.join"
                            },
                            {
                                "code": "arr.filter(function (x) {\n        return x > this.j;\n    }, obj)\n        .map(function (x, i) {\n            return x + this.i;\n        }, obj)\n        .join(' = ');",
                                "line": 29,
                                "collumn": 4,
                                "transformation": "Array.filter.map.join"
                            },
                            {
                                "code": "generated: var {\n  arrayFilterMapJoinHelper: _afmjt\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterMapJoinHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayFilterMapJoinHelperWithFilterThis: _afmjtwft\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterMapJoinHelperWithFilterThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayFilterMapJoinHelperWithMapThis: _afmjtwmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterMapJoinHelperWithMapThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayFilterMapJoinHelperWithFilterAndMapThis: _afmjtwfmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterMapJoinHelperWithFilterAndMapThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Array.filter.map.js": {
                        "total": 10,
                        "byTransformations": [
                            {
                                "code": "const arr = [1, 2, 3];",
                                "line": 2,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "arr.filter((x) => x > 0.5).map((x, i) => x + i);",
                                "line": 4,
                                "collumn": 0,
                                "transformation": "Array.filter.map"
                            },
                            {
                                "code": "const obj = {\n    i: 1,\n    j: 0.5,\n};",
                                "line": 6,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "arr.filter(function (x) {\n    return x > this.j;\n}, obj).map((x, i) => x + i);",
                                "line": 12,
                                "collumn": 0,
                                "transformation": "Array.filter.map"
                            },
                            {
                                "code": "arr.filter((x) => x > 0.5).map(function (x, i) {\n    return x + this.i;\n}, obj);",
                                "line": 17,
                                "collumn": 0,
                                "transformation": "Array.filter.map"
                            },
                            {
                                "code": "arr.filter(function (x) {\n        return x > this.j;\n    }, obj).map(function (x, i) {\n        return x + this.i;\n    }, obj);",
                                "line": 23,
                                "collumn": 4,
                                "transformation": "Array.filter.map"
                            },
                            {
                                "code": "generated: var {\n  arrayFilterMapHelper: _afmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterMapHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayFilterMapHelperWithFilterThis: _afmtwft\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterMapHelperWithFilterThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayFilterMapHelperWithMapThis: _afmtwmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterMapHelperWithMapThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayFilterMapHelperWithFilterAndMapThis: _afmtwfmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterMapHelperWithFilterAndMapThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Array.filter.reduce.js": {
                        "total": 18,
                        "byTransformations": [
                            {
                                "code": "const func2 = require('func2');",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const arr = [1, 2, 3];",
                                "line": 3,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const func1 = (x, i, a) => x > 1;",
                                "line": 7,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const y = arr.map(func1).reduce((acc, x) => acc + x, 0);",
                                "line": 8,
                                "collumn": 0,
                                "transformation": "Array.map.reduce"
                            },
                            {
                                "code": "const y = arr.map(func1).reduce((acc, x) => acc + x, 0);",
                                "line": 8,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const arr1 = ['1', '2', '3'];",
                                "line": 11,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const x = arr1.filter((x) => x > 1).reduce((acc, x) => acc + x, 0);",
                                "line": 12,
                                "collumn": 0,
                                "transformation": "Array.filter.reduce"
                            },
                            {
                                "code": "const x = arr1.filter((x) => x > 1).reduce((acc, x) => acc + x, 0);",
                                "line": 12,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "return [...a, ...b]\n            .map((x, i) => x * i)\n            .filter(func)\n            .reduce((acc, x) => acc + x, 0);",
                                "line": 21,
                                "collumn": 8,
                                "transformation": "Array.filter.reduce"
                            },
                            {
                                "code": "return [...a, ...b]\n            .map((x, i) => x * i)\n            .filter(func)\n            .reduce((acc, x) => acc + x, 0);",
                                "line": 21,
                                "collumn": 8,
                                "transformation": "Array.map"
                            },
                            {
                                "code": "const z = arr.filter(func2).reduce((acc, x) => acc + x, 0);",
                                "line": 31,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const z1 = arr.filter(func).reduce((acc, x, i, a) => acc + x + i + a[i], 0);",
                                "line": 34,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const obj = {\n    i: 1,\n};",
                                "line": 37,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "arr.filter(function (x) {\n    return x > this.i;\n}, obj).reduce((acc, x) => acc + x, 0);",
                                "line": 40,
                                "collumn": 0,
                                "transformation": "Array.filter.reduce"
                            },
                            {
                                "code": "generated: var {\n  arrayMapReduceHelper: _amrh\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapReduceHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayFilterReduceHelper: _afrh\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterReduceHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayMapHelper: _amh\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayFilterReduceHelperWithFilterThis: _afrhwft\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterReduceHelperWithFilterThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Array.join unfold.js": {
                        "total": 12,
                        "byTransformations": [
                            {
                                "code": "const c = [1].join();",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Array.join unfold"
                            },
                            {
                                "code": "const c = [1].join();",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const a = [1, 2, 3, 4, 5].join();",
                                "line": 3,
                                "collumn": 0,
                                "transformation": "Array.join unfold"
                            },
                            {
                                "code": "const a = [1, 2, 3, 4, 5].join();",
                                "line": 3,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const a1 = [\"default-src 'none';\", \"base-uri 'none';\", \"object-src 'none';\"].join(' ');",
                                "line": 5,
                                "collumn": 0,
                                "transformation": "Array.join unfold"
                            },
                            {
                                "code": "const a1 = [\"default-src 'none';\", \"base-uri 'none';\", \"object-src 'none';\"].join(' ');",
                                "line": 5,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const a2 = [s0 ? 5 : 0, 1, 'two', 'three', true, null, undefined, s1, s12].join(a.S);",
                                "line": 7,
                                "collumn": 0,
                                "transformation": "Array.join unfold"
                            },
                            {
                                "code": "const a2 = [s0 ? 5 : 0, 1, 'two', 'three', true, null, undefined, s1, s12].join(a.S);",
                                "line": 7,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const a3 = [s1, s12, s13, s14].join('\\n' + sep);",
                                "line": 9,
                                "collumn": 0,
                                "transformation": "Array.join unfold"
                            },
                            {
                                "code": "const a3 = [s1, s12, s13, s14].join('\\n' + sep);",
                                "line": 9,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const a4 = [\"default-src 'none';\", \"base-uri 'none';\", \"object-src 'none';\"].join(sep);",
                                "line": 11,
                                "collumn": 0,
                                "transformation": "Array.join unfold"
                            },
                            {
                                "code": "const a4 = [\"default-src 'none';\", \"base-uri 'none';\", \"object-src 'none';\"].join(sep);",
                                "line": 11,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Array.join.js": {
                        "total": 5,
                        "byTransformations": [
                            {
                                "code": "const path = require('path');",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const arr = [1, 2, 3];",
                                "line": 3,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "arr.join();",
                                "line": 5,
                                "collumn": 0,
                                "transformation": "Array.join"
                            },
                            {
                                "code": "arr.join(' - ');",
                                "line": 6,
                                "collumn": 0,
                                "transformation": "Array.join"
                            },
                            {
                                "code": "generated: var {\n  arrayJoinHelper: _ajh\n} = require(\"/babel-preset-perf/dist/helpers/arrayJoinHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Array.map unfold.js": {
                        "total": 22,
                        "byTransformations": [
                            {
                                "code": "const a = [\n    'Int8',\n    'Uint8',\n    'Uint8Clamped',\n    'Int16',\n    'Uint16',\n    'Int32',\n    'Uint32',\n    'Float32',\n    'Float64',\n    'BigInt64',\n    'BigUint64',\n].map((x) => x + 'Array');",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Array.map unfold"
                            },
                            {
                                "code": "const a = [\n    'Int8',\n    'Uint8',\n    'Uint8Clamped',\n    'Int16',\n    'Uint16',\n    'Int32',\n    'Uint32',\n    'Float32',\n    'Float64',\n    'BigInt64',\n    'BigUint64',\n].map((x) => x + 'Array');",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const schema = (root) => ({\n    metadata: {\n        union: [\n            emptyForm,\n            refForm,\n            typeForm,\n            enumForm,\n            elementsForm,\n            propertiesForm,\n            optionalPropertiesForm,\n            discriminatorForm,\n            valuesForm,\n        ].map((s) => s(root)),\n    },\n});",
                                "line": 15,
                                "collumn": 0,
                                "transformation": "Array.map unfold"
                            },
                            {
                                "code": "generated: var _mp2 = s => s(root);",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const schema = (root) => ({\n    metadata: {\n        union: [\n            emptyForm,\n            refForm,\n            typeForm,\n            enumForm,\n            elementsForm,\n            propertiesForm,\n            optionalPropertiesForm,\n            discriminatorForm,\n            valuesForm,\n        ].map((s) => s(root)),\n    },\n});",
                                "line": 15,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const f = (x) => x;",
                                "line": 35,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "[1, 2, 3].map(f);",
                                "line": 36,
                                "collumn": 0,
                                "transformation": "Array.map unfold"
                            },
                            {
                                "code": "const f1 = (x, i) => x + i;",
                                "line": 39,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "[1, 2, 3].map(f1);",
                                "line": 40,
                                "collumn": 0,
                                "transformation": "Array.map unfold"
                            },
                            {
                                "code": "const f11 = (x, i, a) => x + i + a[i];",
                                "line": 43,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const f111 = (x, i, a) => x + i;",
                                "line": 47,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "[1, 2, 3].map(f111);",
                                "line": 48,
                                "collumn": 0,
                                "transformation": "Array.map unfold"
                            },
                            {
                                "code": "[1, 2, 3].map((x) => x + i);",
                                "line": 51,
                                "collumn": 0,
                                "transformation": "Array.map unfold"
                            },
                            {
                                "code": "[1, 2, 3].map((x, i) => x + i);",
                                "line": 54,
                                "collumn": 0,
                                "transformation": "Array.map unfold"
                            },
                            {
                                "code": "[1, 2, 3].map(function (x, i) {\n    return x + i;\n});",
                                "line": 57,
                                "collumn": 0,
                                "transformation": "Array.map unfold"
                            },
                            {
                                "code": "[1, 2, 3].map(String);",
                                "line": 61,
                                "collumn": 0,
                                "transformation": "Array.map unfold"
                            },
                            {
                                "code": "[1, 2, 3].map(Number);",
                                "line": 63,
                                "collumn": 0,
                                "transformation": "Array.map unfold"
                            },
                            {
                                "code": "[1, 2, 3].map(Boolean);",
                                "line": 65,
                                "collumn": 0,
                                "transformation": "Array.map unfold"
                            },
                            {
                                "code": "generated: var _mp = x => x + 'Array';",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var _mp3 = x => x + i;",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var _mp4 = (x, i) => x + i;",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var _mp5 = function (x, i) {\n  return x + i;\n};",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Array.map.filter.join.js": {
                        "total": 17,
                        "byTransformations": [
                            {
                                "code": "const func2 = require('func2');",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const arr = [1, 2, 3];",
                                "line": 4,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const obj = {\n    i: 1,\n};",
                                "line": 5,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const func1 = (x, i, a) => x + i - a[0];",
                                "line": 10,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const func3 = (x, i) => x > 0;",
                                "line": 11,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const y = arr.map(func1).filter(func3).join(' ');",
                                "line": 12,
                                "collumn": 0,
                                "transformation": "Array.filter.join"
                            },
                            {
                                "code": "const y = arr.map(func1).filter(func3).join(' ');",
                                "line": 12,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const x = arr\n    .map(String)\n    .filter(function (x) {\n        return x > this.i;\n    }, obj)\n    .join();",
                                "line": 15,
                                "collumn": 0,
                                "transformation": "Array.map.filter.join"
                            },
                            {
                                "code": "const x = arr\n    .map(String)\n    .filter(function (x) {\n        return x > this.i;\n    }, obj)\n    .join();",
                                "line": 15,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "return [...a, ...b]\n            .sort()\n            .map(func, obj)\n            .filter((x) => x > 0.5)\n            .join();",
                                "line": 30,
                                "collumn": 8,
                                "transformation": "Array.map.filter.join"
                            },
                            {
                                "code": "const z = arr\n    .map(func2)\n    .filter((x) => x > 0.5)\n    .join();",
                                "line": 41,
                                "collumn": 0,
                                "transformation": "Array.filter.join"
                            },
                            {
                                "code": "const z = arr\n    .map(func2)\n    .filter((x) => x > 0.5)\n    .join();",
                                "line": 41,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "arr.map(function (x) {\n    return x + this.i;\n}, obj)\n    .filter(function (x) {\n        return x > this.i;\n    }, obj)\n    .join();",
                                "line": 46,
                                "collumn": 0,
                                "transformation": "Array.map.filter.join"
                            },
                            {
                                "code": "generated: var {\n  arrayFilterJoinHelper: _afjh\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterJoinHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayMapFilterJoinHelperWithFilterThis: _amfjhwft\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapFilterJoinHelperWithFilterThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayMapFilterJoinHelperWithMapThis: _amfjhwmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapFilterJoinHelperWithMapThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayMapFilterJoinHelperWithMapAndFilterThis: _amfjhwmft\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapFilterJoinHelperWithMapAndFilterThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Array.map.filter.js": {
                        "total": 16,
                        "byTransformations": [
                            {
                                "code": "const func2 = require('func2');",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const arr = [1, 2, 3];",
                                "line": 4,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const obj = {\n    i: 1,\n};",
                                "line": 5,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const func1 = (x, i, a) => x + i - a[0];",
                                "line": 10,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const func3 = (x, i) => x > 0;",
                                "line": 11,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const y = arr.map(func1).filter(func3);",
                                "line": 12,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const x = arr.map(String).filter(function (x) {\n    return x > this.i;\n}, obj);",
                                "line": 15,
                                "collumn": 0,
                                "transformation": "Array.map.filter"
                            },
                            {
                                "code": "const x = arr.map(String).filter(function (x) {\n    return x > this.i;\n}, obj);",
                                "line": 15,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "return [...a, ...b]\n            .map(function (x) {\n                return x + this.i;\n            }, obj)\n            .filter((x) => x > 0.5)\n            .map(func);",
                                "line": 27,
                                "collumn": 8,
                                "transformation": "Array.filter.map"
                            },
                            {
                                "code": "return [...a, ...b]\n            .map(function (x) {\n                return x + this.i;\n            }, obj)\n            .filter((x) => x > 0.5)\n            .map(func);",
                                "line": 27,
                                "collumn": 8,
                                "transformation": "Array.map"
                            },
                            {
                                "code": "const z = arr.map(func2).filter((x) => x > 0.5);",
                                "line": 39,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "arr.map(function (x) {\n    return x + this.i;\n}, obj).filter(function (x) {\n    return x > this.i;\n}, obj);",
                                "line": 41,
                                "collumn": 0,
                                "transformation": "Array.map.filter"
                            },
                            {
                                "code": "generated: var {\n  arrayMapFilterHelperWithFilterThis: _amfhwft\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapFilterHelperWithFilterThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayFilterMapHelper: _afmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayFilterMapHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayMapHelperWithMapThis: _amhwmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapHelperWithMapThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayMapFilterHelperWithMapAndFilterThis: _amfhwfmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapFilterHelperWithMapAndFilterThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Array.map.fiorEach.js": {
                        "total": 16,
                        "byTransformations": [
                            {
                                "code": "const arr = [1, 2, 3];",
                                "line": 2,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const obj = {\n    i: 1,\n};",
                                "line": 3,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const func3 = (x, i, a) => {\n    x = x + 1;\n};",
                                "line": 8,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const y = arr.map((x) => x).forEach(func3);",
                                "line": 11,
                                "collumn": 0,
                                "transformation": "Array.map.forEach"
                            },
                            {
                                "code": "const y = arr.map((x) => x).forEach(func3);",
                                "line": 11,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const o = {};",
                                "line": 13,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const x1 = arr\n    .map(function (x) {\n        return x;\n    })\n    .forEach(function (x) {\n        o[i] = x + this.i;\n    }, obj);",
                                "line": 16,
                                "collumn": 0,
                                "transformation": "Array.map.forEach"
                            },
                            {
                                "code": "const x1 = arr\n    .map(function (x) {\n        return x;\n    })\n    .forEach(function (x) {\n        o[i] = x + this.i;\n    }, obj);",
                                "line": 16,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const x2 = arr\n    .map(function (x) {\n        return x + this.i;\n    }, obj)\n    .forEach(function (x) {\n        o[i] = x + this.i;\n    }, obj);",
                                "line": 24,
                                "collumn": 0,
                                "transformation": "Array.map.forEach"
                            },
                            {
                                "code": "const x2 = arr\n    .map(function (x) {\n        return x + this.i;\n    }, obj)\n    .forEach(function (x) {\n        o[i] = x + this.i;\n    }, obj);",
                                "line": 24,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const x3 = arr\n    .map(function (x) {\n        return x + this.i;\n    }, obj)\n    .forEach(function (x) {\n        o[i] = x;\n    });",
                                "line": 32,
                                "collumn": 0,
                                "transformation": "Array.map.forEach"
                            },
                            {
                                "code": "const x3 = arr\n    .map(function (x) {\n        return x + this.i;\n    }, obj)\n    .forEach(function (x) {\n        o[i] = x;\n    });",
                                "line": 32,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayMapForEachHelper: _amfeh\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapForEachHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayMapForEachHelperWithForEachThis: _amfehwfet\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapForEachHelperWithForEachThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayMapForEachHelperWithMapAndForEachThis: _amfehwmfet\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapForEachHelperWithMapAndForEachThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayMapForEachHelperWithMapThis: _amfehwmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapForEachHelperWithMapThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Array.map.join unfold.js": {
                        "total": 22,
                        "byTransformations": [
                            {
                                "code": "[1, 2, 3].map(String).join();",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Array.map.join unfold"
                            },
                            {
                                "code": "[1, 2, 3].map((x) => x).join();",
                                "line": 4,
                                "collumn": 0,
                                "transformation": "Array.map.join unfold"
                            },
                            {
                                "code": "[1, 2, 3].map((x, i) => x + i).join();",
                                "line": 7,
                                "collumn": 0,
                                "transformation": "Array.map.join unfold"
                            },
                            {
                                "code": "[1, 2, 3]\n    .map(function (x, i) {\n        return x + i;\n    })\n    .join();",
                                "line": 10,
                                "collumn": 0,
                                "transformation": "Array.map.join unfold"
                            },
                            {
                                "code": "const f = (x, i) => x + i;",
                                "line": 17,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "[1, 2, 3].map(f).join();",
                                "line": 18,
                                "collumn": 0,
                                "transformation": "Array.map.join unfold"
                            },
                            {
                                "code": "[1, 2, 3].map((x, i, a) => x + i).join();",
                                "line": 21,
                                "collumn": 0,
                                "transformation": "Array.map.join unfold"
                            },
                            {
                                "code": "const f1 = (x, i, a) => x + i;",
                                "line": 24,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "[1, 2, 3].map(f1).join();",
                                "line": 25,
                                "collumn": 0,
                                "transformation": "Array.map.join unfold"
                            },
                            {
                                "code": "[1, 2, 3].map((x, i, a) => x + a[i]).join();",
                                "line": 28,
                                "collumn": 0,
                                "transformation": "Array.join"
                            },
                            {
                                "code": "const f2 = () => [1, 2, 3].map(f).join('-');",
                                "line": 31,
                                "collumn": 0,
                                "transformation": "Array.map.join unfold"
                            },
                            {
                                "code": "const f2 = () => [1, 2, 3].map(f).join('-');",
                                "line": 31,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const f3 = () => [1, 2, 3].map((x, i, a) => x + i).join('-');",
                                "line": 34,
                                "collumn": 0,
                                "transformation": "Array.map.join unfold"
                            },
                            {
                                "code": "generated: var _mp5 = (x, i, a) => x + i;",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const f3 = () => [1, 2, 3].map((x, i, a) => x + i).join('-');",
                                "line": 34,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const f4 = () => [1, 2, 3].map((x, i, a) => x + a[i]).join('-');",
                                "line": 37,
                                "collumn": 0,
                                "transformation": "Array.join"
                            },
                            {
                                "code": "const f4 = () => [1, 2, 3].map((x, i, a) => x + a[i]).join('-');",
                                "line": 37,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var _mp = x => x;",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var _mp2 = (x, i) => x + i;",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var _mp3 = function (x, i) {\n  return x + i;\n};",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var _mp4 = (x, i, a) => x + i;",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayJoinHelper: _ajh\n} = require(\"/babel-preset-perf/dist/helpers/arrayJoinHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Array.map.join.js": {
                        "total": 17,
                        "byTransformations": [
                            {
                                "code": "const func2 = require('func2');",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const arr = [1, 2, 3];",
                                "line": 4,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const func1 = (x, i, a) => x + i - a[0];",
                                "line": 7,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const y = arr.map(func1).join('|');",
                                "line": 8,
                                "collumn": 0,
                                "transformation": "Array.join"
                            },
                            {
                                "code": "const y = arr.map(func1).join('|');",
                                "line": 8,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const x = arr.map(String).join();",
                                "line": 11,
                                "collumn": 0,
                                "transformation": "Array.map.join"
                            },
                            {
                                "code": "const x = arr.map(String).join();",
                                "line": 11,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "return [...a, ...b]\n            .map((x, i) => x * i)\n            .map(func)\n            .join('--');",
                                "line": 20,
                                "collumn": 8,
                                "transformation": "Array.map.join"
                            },
                            {
                                "code": "return [...a, ...b]\n            .map((x, i) => x * i)\n            .map(func)\n            .join('--');",
                                "line": 20,
                                "collumn": 8,
                                "transformation": "Array.map"
                            },
                            {
                                "code": "const z = arr.map(func2).join();",
                                "line": 30,
                                "collumn": 0,
                                "transformation": "Array.join"
                            },
                            {
                                "code": "const z = arr.map(func2).join();",
                                "line": 30,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const obj = {\n    i: 1,\n};",
                                "line": 32,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "arr.map(function (x) {\n    return x + this.i;\n}, obj).join();",
                                "line": 35,
                                "collumn": 0,
                                "transformation": "Array.map.join"
                            },
                            {
                                "code": "generated: var {\n  arrayJoinHelper: _ajh\n} = require(\"/babel-preset-perf/dist/helpers/arrayJoinHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayMapJoinHelper: _amjh\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapJoinHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayMapHelper: _amh\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayMapJoinHelperWithMapThis: _amjhwmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapJoinHelperWithMapThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Array.map.js": {
                        "total": 13,
                        "byTransformations": [
                            {
                                "code": "const func2 = require('func2');",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const arr = [1, 2, 3];",
                                "line": 4,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const func1 = (x, i, a) => x + i - a[0];",
                                "line": 7,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const y = arr.map(func1);",
                                "line": 8,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const x = arr.map(String);",
                                "line": 11,
                                "collumn": 0,
                                "transformation": "Array.map"
                            },
                            {
                                "code": "const x = arr.map(String);",
                                "line": 11,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "return [...a, ...b].map((x, i) => x * i).map(func);",
                                "line": 20,
                                "collumn": 8,
                                "transformation": "Array.map"
                            },
                            {
                                "code": "return [...a, ...b].map((x, i) => x * i).map(func);",
                                "line": 20,
                                "collumn": 8,
                                "transformation": "Array.map"
                            },
                            {
                                "code": "const z = arr.map(func2);",
                                "line": 27,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const obj = {\n    i: 1,\n};",
                                "line": 29,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "arr.map(function (x) {\n    return x + this.i;\n}, obj);",
                                "line": 32,
                                "collumn": 0,
                                "transformation": "Array.map"
                            },
                            {
                                "code": "generated: var {\n  arrayMapHelper: _amh\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayMapHelperWithMapThis: _amhwmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapHelperWithMapThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Array.map.reduce.js": {
                        "total": 15,
                        "byTransformations": [
                            {
                                "code": "const func2 = require('func2');",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const arr = [1, 2, 3];",
                                "line": 4,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const func1 = (x, i, a) => x + i - a[0];",
                                "line": 7,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const y = arr.map(func1).reduce((acc, x) => acc + x, 0);",
                                "line": 8,
                                "collumn": 0,
                                "transformation": "Array.map.reduce"
                            },
                            {
                                "code": "const y = arr.map(func1).reduce((acc, x) => acc + x, 0);",
                                "line": 8,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const x = arr.map(Number).reduce((acc, x) => acc + x, 0);",
                                "line": 11,
                                "collumn": 0,
                                "transformation": "Array.map.reduce"
                            },
                            {
                                "code": "const x = arr.map(Number).reduce((acc, x) => acc + x, 0);",
                                "line": 11,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "return [...a, ...b]\n            .map((x, i) => x * i)\n            .map(func)\n            .reduce((acc, x) => acc + x, 0);",
                                "line": 20,
                                "collumn": 8,
                                "transformation": "Array.map.reduce"
                            },
                            {
                                "code": "return [...a, ...b]\n            .map((x, i) => x * i)\n            .map(func)\n            .reduce((acc, x) => acc + x, 0);",
                                "line": 20,
                                "collumn": 8,
                                "transformation": "Array.map"
                            },
                            {
                                "code": "const z = arr.map(func2).reduce((acc, x) => acc + x, 0);",
                                "line": 30,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const obj = {\n    i: 1,\n};",
                                "line": 32,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "arr.map(function (x) {\n    return x + this.i;\n}, obj).reduce((acc, x) => acc + x, 0);",
                                "line": 35,
                                "collumn": 0,
                                "transformation": "Array.map.reduce"
                            },
                            {
                                "code": "generated: var {\n  arrayMapReduceHelper: _amrh\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapReduceHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayMapHelper: _amh\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arrayMapReduceHelperWithMapThis: _amrhwmt\n} = require(\"/babel-preset-perf/dist/helpers/arrayMapReduceHelperWithMapThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Array.slice.every.js": {
                        "total": 11,
                        "byTransformations": [
                            {
                                "code": "const nums = [1, 2, 3];",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "nums.slice().every((x, i) => x > 1);",
                                "line": 3,
                                "collumn": 0,
                                "transformation": "Array.slice.every"
                            },
                            {
                                "code": "nums.slice(start).every((x, i) => x > 1);",
                                "line": 4,
                                "collumn": 0,
                                "transformation": "Array.slice.every"
                            },
                            {
                                "code": "nums.slice(start, end).every((x, i) => x > 1);",
                                "line": 5,
                                "collumn": 0,
                                "transformation": "Array.slice.every"
                            },
                            {
                                "code": "nums.slice(-3).every((x, i) => x > 1);",
                                "line": 6,
                                "collumn": 0,
                                "transformation": "Array.slice.every"
                            },
                            {
                                "code": "nums.slice(start, -1).every((x, i) => x > 1);",
                                "line": 7,
                                "collumn": 0,
                                "transformation": "Array.slice.every"
                            },
                            {
                                "code": "nums.slice(-5, -1).every((x, i) => x > 1);",
                                "line": 8,
                                "collumn": 0,
                                "transformation": "Array.slice.every"
                            },
                            {
                                "code": "const obj = { i: 1 };",
                                "line": 10,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "nums.slice(start, end).every(function (x, i) {\n    return x > this.i;\n}, obj);",
                                "line": 11,
                                "collumn": 0,
                                "transformation": "Array.slice.every"
                            },
                            {
                                "code": "generated: var {\n  arraySliceEveryHelper: _aseh\n} = require(\"/babel-preset-perf/dist/helpers/arraySliceEveryHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arraySliceEveryHelperWithEveryThis: _asehwet\n} = require(\"/babel-preset-perf/dist/helpers/arraySliceEveryHelperWithEveryThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Array.slice.map.join.js": {
                        "total": 13,
                        "byTransformations": [
                            {
                                "code": "const arr = [1, 2, 3, 4, 5];",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const start = 1;",
                                "line": 2,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const end = 3;",
                                "line": 3,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const obj = { i: 1 };",
                                "line": 4,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "arr.slice(start, end)\n    .map((x, i) => x + i)\n    .join(' ');",
                                "line": 6,
                                "collumn": 0,
                                "transformation": "Array.slice.map.join"
                            },
                            {
                                "code": "arr.slice()\n    .map((x, i) => x + i)\n    .join(' ');",
                                "line": 10,
                                "collumn": 0,
                                "transformation": "Array.slice.map.join"
                            },
                            {
                                "code": "arr.slice(1)\n    .map((x, i) => x + i)\n    .join(' ');",
                                "line": 14,
                                "collumn": 0,
                                "transformation": "Array.slice.map.join"
                            },
                            {
                                "code": "arr.slice(-1)\n    .map((x, i) => x + i)\n    .join(' ');",
                                "line": 18,
                                "collumn": 0,
                                "transformation": "Array.slice.map.join"
                            },
                            {
                                "code": "arr.slice(-3, -1)\n    .map((x, i) => x + i)\n    .join(' ');",
                                "line": 22,
                                "collumn": 0,
                                "transformation": "Array.slice.map.join"
                            },
                            {
                                "code": "arr.slice(0, -1)\n    .map((x, i) => x + i)\n    .join(' ');",
                                "line": 26,
                                "collumn": 0,
                                "transformation": "Array.slice.map.join"
                            },
                            {
                                "code": "arr.slice(start, end)\n    .map(function (x, i) {\n        return x + this.i;\n    }, obj)\n    .join(' ');",
                                "line": 30,
                                "collumn": 0,
                                "transformation": "Array.slice.map.join"
                            },
                            {
                                "code": "generated: var {\n  arraySliceMapJoinHelper: _asmjh\n} = require(\"/babel-preset-perf/dist/helpers/arraySliceMapJoinHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  arraySliceMapJoinHelperWithMapThis: _asmjhwmt\n} = require(\"/babel-preset-perf/dist/helpers/arraySliceMapJoinHelperWithMapThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Object expression with spread.js": {
                        "total": 2,
                        "byTransformations": [
                            {
                                "code": "const x = { a: { ...obj, a: 1, c: 2, ...b, d: 3 }, e: { ...c }, f };",
                                "line": 5,
                                "collumn": 0,
                                "transformation": "Object expression with spread"
                            },
                            {
                                "code": "const x = { a: { ...obj, a: 1, c: 2, ...b, d: 3 }, e: { ...c }, f };",
                                "line": 5,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Object.entries.filter.map.join.js": {
                        "total": 10,
                        "byTransformations": [
                            {
                                "code": "Object.entries(obj)\n    .filter(([key, val], i) => key.length > 1 && val > -1)\n    .map(([key, val]) => key.length + val)\n    .join('-');",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Object.entries.filter.map.join"
                            },
                            {
                                "code": "const o = { i: 1 };",
                                "line": 6,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const obj = { abcd: 1, bcd: 2, cd: 0 };",
                                "line": 7,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "Object.entries(obj)\n    .filter(function ([key, val], i) {\n        return key.length > this.i && val > -1;\n    }, o)\n    .map(([key, val]) => key.length + val)\n    .join('-');",
                                "line": 10,
                                "collumn": 0,
                                "transformation": "Object.entries.filter.map.join"
                            },
                            {
                                "code": "Object.entries(obj)\n    .filter(([key, val], i) => key.length > 1 && val > -1)\n    .map(function ([key, val]) {\n        return key.length + val + this.i;\n    }, o)\n    .join('-');",
                                "line": 18,
                                "collumn": 0,
                                "transformation": "Object.entries.filter.map.join"
                            },
                            {
                                "code": "Object.entries(obj)\n    .filter(function ([key, val], i) {\n        return key.length > this.i && val > -1;\n    }, o)\n    .map(function ([key, val]) {\n        return key.length + val + this.i;\n    }, o)\n    .join('-');",
                                "line": 26,
                                "collumn": 0,
                                "transformation": "Object.entries.filter.map.join"
                            },
                            {
                                "code": "generated: var {\n  objectEntriesFilterMapJoinHelper: _oefmjt\n} = require(\"/babel-preset-perf/dist/helpers/objectEntriesFilterMapJoinHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  objectEntriesFilterMapJoinHelperWithFilterThis: _oefmjtwft\n} = require(\"/babel-preset-perf/dist/helpers/objectEntriesFilterMapJoinHelperWithFilterThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  objectEntriesFilterMapJoinHelperWithMapThis: _oefmjtwmt\n} = require(\"/babel-preset-perf/dist/helpers/objectEntriesFilterMapJoinHelperWithMapThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  objectEntriesFilterMapJoinHelperWithFilterAndMapThis: _oefmjtwfmt\n} = require(\"/babel-preset-perf/dist/helpers/objectEntriesFilterMapJoinHelperWithFilterAndMapThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Object.entries.forEach.js": {
                        "total": 5,
                        "byTransformations": [
                            {
                                "code": "Object.entries(smallObj).forEach(([key, val], i) => {\n    res = key.length + String(val).length + i;\n});",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Object.entries.forEach"
                            },
                            {
                                "code": "const obj = { i: 1 };",
                                "line": 6,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "Object.entries(smallObj).forEach(function ([key, val], i) {\n    res = key.length + String(val).length + this.i;\n}, obj);",
                                "line": 7,
                                "collumn": 0,
                                "transformation": "Object.entries.forEach"
                            },
                            {
                                "code": "generated: var {\n  objectEntriesForEachHelper: _oefeh\n} = require(\"/babel-preset-perf/dist/helpers/objectEntriesForEachHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  objectEntriesForEachHelperWithForEachThis: _oefehwfet\n} = require(\"/babel-preset-perf/dist/helpers/objectEntriesForEachHelperWithForEachThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Object.entries.map.js": {
                        "total": 5,
                        "byTransformations": [
                            {
                                "code": "Object.entries(smallObj).map(([key, val], i) => key.length + String(val).length + i);",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Object.entries.map"
                            },
                            {
                                "code": "const obj = { i: 1 };",
                                "line": 3,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "Object.entries(smallObj).map(function ([key, val], i) {\n    return key.length + String(val).length + this.i;\n}, obj);",
                                "line": 4,
                                "collumn": 0,
                                "transformation": "Object.entries.map"
                            },
                            {
                                "code": "generated: var {\n  objectEntriesMapHelper: _oemh\n} = require(\"/babel-preset-perf/dist/helpers/objectEntriesMapHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  objectEntriesMapHelperWithMapThis: _oemhwmt\n} = require(\"/babel-preset-perf/dist/helpers/objectEntriesMapHelperWithMapThis\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Object.entries.reduce.js": {
                        "total": 3,
                        "byTransformations": [
                            {
                                "code": "Object.entries(obj).reduce((acc, [key, val], i) => acc + key.length + String(val).length + i, 0);",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Object.entries.reduce"
                            },
                            {
                                "code": "Object.entries({ a: 1, b: 2 }).reduce((acc, [key, val], i) => acc + key.length + String(val).length + i, 0);",
                                "line": 2,
                                "collumn": 0,
                                "transformation": "Object.entries.reduce"
                            },
                            {
                                "code": "generated: var {\n  objectEntriesReduceHelper: _oerh\n} = require(\"/babel-preset-perf/dist/helpers/objectEntriesReduceHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Object.values[0].js": {
                        "total": 6,
                        "byTransformations": [
                            {
                                "code": "const objs = { a: 1, b: 2 };",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const v = Object.values(obj)[0];",
                                "line": 3,
                                "collumn": 0,
                                "transformation": "Object.values[0]"
                            },
                            {
                                "code": "const v = Object.values(obj)[0];",
                                "line": 3,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const v1 = Object.values({ a: 1, b: 2 })[0];",
                                "line": 4,
                                "collumn": 0,
                                "transformation": "Object.values[0]"
                            },
                            {
                                "code": "const v1 = Object.values({ a: 1, b: 2 })[0];",
                                "line": 4,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "generated: var {\n  objectValuesFirstItemHelper: _ovfih\n} = require(\"/babel-preset-perf/dist/helpers/objectValuesFirstItemHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/String.slice.js": {
                        "total": 6,
                        "byTransformations": [
                            {
                                "code": "'String'.slice(1, 5);",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "String.slice"
                            },
                            {
                                "code": "'String'.slice(1);",
                                "line": 2,
                                "collumn": 0,
                                "transformation": "String.slice"
                            },
                            {
                                "code": "'String'.slice();",
                                "line": 3,
                                "collumn": 0,
                                "transformation": "String.slice"
                            },
                            {
                                "code": "'12345'.slice(1, -2);",
                                "line": 4,
                                "collumn": 0,
                                "transformation": "String.slice"
                            },
                            {
                                "code": "[1, 2, 3].slice(4, 8);",
                                "line": 6,
                                "collumn": 0,
                                "transformation": "String.slice"
                            },
                            {
                                "code": "generated: var {\n  stringSliceHelper: _ssh\n} = require(\"/babel-preset-perf/dist/helpers/stringSliceHelper\");",
                                "line": 0,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/Transform const and let with var.js": {
                        "total": 3,
                        "byTransformations": [
                            {
                                "code": "let s = '';",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "const a = 1;",
                                "line": 2,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            },
                            {
                                "code": "for (let i = 0; i < 100; i++) {\n    console.log(i);\n}",
                                "line": 4,
                                "collumn": 5,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    },
                    "/babel-preset-perf/tests/demo/index.js": {
                        "total": 1,
                        "byTransformations": [
                            {
                                "code": "const a = 1;",
                                "line": 1,
                                "collumn": 0,
                                "transformation": "Variable transform const and let with var"
                            }
                        ]
                    }
                }
            }
        },
        "warnings": {
            "total": 30,
            "byTransformation": {
                "Array.filter.reduce": [
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.filter.reduce.js",
                        "code": "arr.filter(func2).reduce((acc, x) => acc + x, 0)",
                        "line": 31,
                        "collumn": 10,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.filter.reduce.js",
                        "code": "arr.filter(func).reduce((acc, x, i, a) => acc + x + i + a[i], 0)",
                        "line": 34,
                        "collumn": 11,
                        "warning": "predicate has more than 3 params! ( acc, x, i, a )",
                        "action": "the statement will not be transformed"
                    }
                ],
                "Array.map unfold": [
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map unfold.js",
                        "code": "[1, 2, 3].map(func2)",
                        "line": 32,
                        "collumn": 0,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map unfold.js",
                        "code": "f11 = (x, i, a) => x + i + a[i]",
                        "line": 43,
                        "collumn": 6,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.join unfold.js",
                        "code": "[1, 2, 3].map((x, i, a) => x + a[i])",
                        "line": 28,
                        "collumn": 0,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.join unfold.js",
                        "code": "[1, 2, 3].map((x, i, a) => x + a[i])",
                        "line": 37,
                        "collumn": 17,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    }
                ],
                "Array.map": [
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map unfold.js",
                        "code": "[1, 2, 3].map(func2)",
                        "line": 32,
                        "collumn": 0,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map unfold.js",
                        "code": "f11 = (x, i, a) => x + i + a[i]",
                        "line": 43,
                        "collumn": 6,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.filter.join.js",
                        "code": "func1 = (x, i, a) => x + i - a[0]",
                        "line": 10,
                        "collumn": 6,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.filter.join.js",
                        "code": "arr\n    .map(func2)",
                        "line": 41,
                        "collumn": 10,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.filter.js",
                        "code": "func1 = (x, i, a) => x + i - a[0]",
                        "line": 10,
                        "collumn": 6,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.filter.js",
                        "code": "arr.map(func2)",
                        "line": 39,
                        "collumn": 10,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.join unfold.js",
                        "code": "[1, 2, 3].map((x, i, a) => x + a[i])",
                        "line": 28,
                        "collumn": 0,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.join unfold.js",
                        "code": "[1, 2, 3].map((x, i, a) => x + a[i])",
                        "line": 37,
                        "collumn": 17,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.join.js",
                        "code": "func1 = (x, i, a) => x + i - a[0]",
                        "line": 7,
                        "collumn": 6,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.join.js",
                        "code": "arr.map(func2)",
                        "line": 30,
                        "collumn": 10,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.js",
                        "code": "func1 = (x, i, a) => x + i - a[0]",
                        "line": 7,
                        "collumn": 6,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.js",
                        "code": "arr.map(func2)",
                        "line": 27,
                        "collumn": 10,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.reduce.js",
                        "code": "arr.map(func2)",
                        "line": 30,
                        "collumn": 10,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    }
                ],
                "Array.map.filter.join": [
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.filter.join.js",
                        "code": "func1 = (x, i, a) => x + i - a[0]",
                        "line": 10,
                        "collumn": 6,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.filter.join.js",
                        "code": "arr\n    .map(func2)\n    .filter((x) => x > 0.5)\n    .join()",
                        "line": 41,
                        "collumn": 10,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    }
                ],
                "Array.map.filter": [
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.filter.js",
                        "code": "func1 = (x, i, a) => x + i - a[0]",
                        "line": 10,
                        "collumn": 6,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.filter.js",
                        "code": "arr.map(func2).filter((x) => x > 0.5)",
                        "line": 39,
                        "collumn": 10,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    }
                ],
                "Array.map.join unfold": [
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.join unfold.js",
                        "code": "[1, 2, 3].map((x, i, a) => x + a[i]).join()",
                        "line": 28,
                        "collumn": 0,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.join unfold.js",
                        "code": "[1, 2, 3].map((x, i, a) => x + a[i]).join('-')",
                        "line": 37,
                        "collumn": 17,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    }
                ],
                "Array.slice.map.join": [
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.join unfold.js",
                        "code": "[1, 2, 3].map((x, i, a) => x + a[i]).join()",
                        "line": 28,
                        "collumn": 0,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.join unfold.js",
                        "code": "[1, 2, 3].map((x, i, a) => x + a[i]).join('-')",
                        "line": 37,
                        "collumn": 17,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.join.js",
                        "code": "func1 = (x, i, a) => x + i - a[0]",
                        "line": 7,
                        "collumn": 6,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.join.js",
                        "code": "arr.map(func2).join()",
                        "line": 30,
                        "collumn": 10,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    }
                ],
                "Array.map.reduce": [
                    {
                        "module": "/babel-preset-perf/tests/demo/Array.map.reduce.js",
                        "code": "arr.map(func2).reduce((acc, x) => acc + x, 0)",
                        "line": 30,
                        "collumn": 10,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    }
                ]
            },
            "byModules": {
                "/babel-preset-perf/tests/demo/Array.filter.reduce.js": [
                    {
                        "transformation": "Array.filter.reduce",
                        "code": "arr.filter(func2).reduce((acc, x) => acc + x, 0)",
                        "line": 31,
                        "collumn": 10,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.filter.reduce",
                        "code": "arr.filter(func).reduce((acc, x, i, a) => acc + x + i + a[i], 0)",
                        "line": 34,
                        "collumn": 11,
                        "warning": "predicate has more than 3 params! ( acc, x, i, a )",
                        "action": "the statement will not be transformed"
                    }
                ],
                "/babel-preset-perf/tests/demo/Array.map unfold.js": [
                    {
                        "transformation": "Array.map unfold",
                        "code": "[1, 2, 3].map(func2)",
                        "line": 32,
                        "collumn": 0,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.map",
                        "code": "[1, 2, 3].map(func2)",
                        "line": 32,
                        "collumn": 0,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.map unfold",
                        "code": "f11 = (x, i, a) => x + i + a[i]",
                        "line": 43,
                        "collumn": 6,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.map",
                        "code": "f11 = (x, i, a) => x + i + a[i]",
                        "line": 43,
                        "collumn": 6,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    }
                ],
                "/babel-preset-perf/tests/demo/Array.map.filter.join.js": [
                    {
                        "transformation": "Array.map.filter.join",
                        "code": "func1 = (x, i, a) => x + i - a[0]",
                        "line": 10,
                        "collumn": 6,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.map",
                        "code": "func1 = (x, i, a) => x + i - a[0]",
                        "line": 10,
                        "collumn": 6,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.map.filter.join",
                        "code": "arr\n    .map(func2)\n    .filter((x) => x > 0.5)\n    .join()",
                        "line": 41,
                        "collumn": 10,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.map",
                        "code": "arr\n    .map(func2)",
                        "line": 41,
                        "collumn": 10,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    }
                ],
                "/babel-preset-perf/tests/demo/Array.map.filter.js": [
                    {
                        "transformation": "Array.map.filter",
                        "code": "func1 = (x, i, a) => x + i - a[0]",
                        "line": 10,
                        "collumn": 6,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.map",
                        "code": "func1 = (x, i, a) => x + i - a[0]",
                        "line": 10,
                        "collumn": 6,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.map.filter",
                        "code": "arr.map(func2).filter((x) => x > 0.5)",
                        "line": 39,
                        "collumn": 10,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.map",
                        "code": "arr.map(func2)",
                        "line": 39,
                        "collumn": 10,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    }
                ],
                "/babel-preset-perf/tests/demo/Array.map.join unfold.js": [
                    {
                        "transformation": "Array.map.join unfold",
                        "code": "[1, 2, 3].map((x, i, a) => x + a[i]).join()",
                        "line": 28,
                        "collumn": 0,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.slice.map.join",
                        "code": "[1, 2, 3].map((x, i, a) => x + a[i]).join()",
                        "line": 28,
                        "collumn": 0,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.map unfold",
                        "code": "[1, 2, 3].map((x, i, a) => x + a[i])",
                        "line": 28,
                        "collumn": 0,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.map",
                        "code": "[1, 2, 3].map((x, i, a) => x + a[i])",
                        "line": 28,
                        "collumn": 0,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.map.join unfold",
                        "code": "[1, 2, 3].map((x, i, a) => x + a[i]).join('-')",
                        "line": 37,
                        "collumn": 17,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.slice.map.join",
                        "code": "[1, 2, 3].map((x, i, a) => x + a[i]).join('-')",
                        "line": 37,
                        "collumn": 17,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.map unfold",
                        "code": "[1, 2, 3].map((x, i, a) => x + a[i])",
                        "line": 37,
                        "collumn": 17,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.map",
                        "code": "[1, 2, 3].map((x, i, a) => x + a[i])",
                        "line": 37,
                        "collumn": 17,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    }
                ],
                "/babel-preset-perf/tests/demo/Array.map.join.js": [
                    {
                        "transformation": "Array.slice.map.join",
                        "code": "func1 = (x, i, a) => x + i - a[0]",
                        "line": 7,
                        "collumn": 6,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.map",
                        "code": "func1 = (x, i, a) => x + i - a[0]",
                        "line": 7,
                        "collumn": 6,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.slice.map.join",
                        "code": "arr.map(func2).join()",
                        "line": 30,
                        "collumn": 10,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.map",
                        "code": "arr.map(func2)",
                        "line": 30,
                        "collumn": 10,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    }
                ],
                "/babel-preset-perf/tests/demo/Array.map.js": [
                    {
                        "transformation": "Array.map",
                        "code": "func1 = (x, i, a) => x + i - a[0]",
                        "line": 7,
                        "collumn": 6,
                        "warning": "predicate has more than 2 params! ( x, i, a )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.map",
                        "code": "arr.map(func2)",
                        "line": 27,
                        "collumn": 10,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    }
                ],
                "/babel-preset-perf/tests/demo/Array.map.reduce.js": [
                    {
                        "transformation": "Array.map.reduce",
                        "code": "arr.map(func2).reduce((acc, x) => acc + x, 0)",
                        "line": 30,
                        "collumn": 10,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    },
                    {
                        "transformation": "Array.map",
                        "code": "arr.map(func2)",
                        "line": 30,
                        "collumn": 10,
                        "warning": "predicate has unknown params! ( func2 )",
                        "action": "the statement will not be transformed"
                    }
                ]
            }
        }
    }
}
